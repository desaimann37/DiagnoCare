import React__default, { useState, useRef, useEffect, createElement } from 'react';
import Themes from 'react-sf-themes';

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}

var Util = {
  toMonthName: function toMonthName(monthNumber) {
    var date = new Date();
    date.setMonth(monthNumber - 1);
    return date.toLocaleString('en-US', {
      month: 'long'
    });
  },
  getDaysInMonthUTC: function getDaysInMonthUTC(month, year) {
    var date = new Date(Date.UTC(year, month, 1));
    var days = [];
    while (date.getUTCMonth() === month) {
      days.push(new Date(date));
      date.setUTCDate(date.getUTCDate() + 1);
    }
    return days;
  },
  validateDDMMYYYY: function validateDDMMYYYY(dd, mm, yyyy) {
    if (dd == "" || mm == "" || yyyy == "" || parseInt(dd) <= 0 || parseInt(dd) > 31 || parseInt(mm) < 0 || parseInt(mm) > 12 || parseInt(yyyy) < 1900 || parseInt(yyyy) > 3000) {
      return false;
    } else {
      if (mm == "2") {
        if (parseInt(mm) % 4 === 0 && parseInt(dd) > 29 || parseInt(mm) % 4 > 0 && parseInt(dd) > 28) {
          return false;
        } else {
          return true;
        }
      } else if (mm == "4" || mm == "6" || mm == "9" || mm == "11") {
        if (parseInt(dd) > 30) {
          return false;
        } else {
          return true;
        }
      }
      return true;
    }
  },
  validateMobile: function validateMobile(value) {
    return value.match(/^[0-9]+$/);
  },
  validateName: function validateName(value) {
    return value.match(/^([ \u00c0-\u01ffa-zA-Z'\-])+$/);
  },
  validateEmail: function validateEmail(value) {
    return value.match(/^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/);
  },
  shadeColor: function shadeColor(color, amount) {
    return '#' + color.replace(/^#/, '').replace(/../g, function (color) {
      return ('0' + Math.min(255, Math.max(0, parseInt(color, 16) + amount)).toString(16)).substr(-2);
    });
  },
  getTextColor: function getTextColor(theme, variant, type) {
    var ret = null;
    if (variant == theme.variants.primary) {
      if (type == theme.types.filled) {
        ret = theme.colors.primaryTextColor;
      } else if (type == theme.types.outlined) {
        ret = theme.colors.primaryBgColor;
      }
    } else if (variant == theme.variants.secondary) {
      if (type == theme.types.filled) {
        ret = theme.colors.secondaryTextColor;
      } else if (type == theme.types.outlined) {
        ret = theme.colors.secondaryBgColor;
      }
    } else if (variant == theme.variants.danger) {
      if (type == theme.types.filled) {
        ret = theme.colors.dangerTextColor;
      } else if (type == theme.types.outlined) {
        ret = theme.colors.dangerBgColor;
      }
    } else if (variant == theme.variants.success) {
      if (type == theme.types.filled) {
        ret = theme.colors.successTextColor;
      } else if (type == theme.types.outlined) {
        ret = theme.colors.successBgColor;
      }
    } else if (variant == theme.variants.warning) {
      if (type == theme.types.filled) {
        ret = theme.colors.warningTextColor;
      } else if (type == theme.types.outlined) {
        ret = theme.colors.warningBgColor;
      }
    } else if (variant == theme.variants.info) {
      if (type == theme.types.filled) {
        ret = theme.colors.infoTextColor;
      } else if (type == theme.types.outlined) {
        ret = theme.colors.infoBgColor;
      }
    } else if (variant == theme.variants.light) {
      if (type == theme.types.filled) {
        ret = theme.colors.lightTextColor;
      } else if (type == theme.types.outlined) {
        ret = theme.colors.lightBgColor;
      }
    } else if (variant == theme.variants.dark) {
      if (type == theme.types.filled) {
        ret = theme.colors.darkTextColor;
      } else if (type == theme.types.outlined) {
        ret = theme.colors.darkBgColor;
      }
    }
    return ret;
  },
  getBackgroundColor: function getBackgroundColor(theme, variant, type) {
    var ret = null;
    if (variant == theme.variants.primary) {
      if (type == theme.types.filled) {
        ret = theme.colors.primaryBgColor;
      } else if (type == theme.types.outlined) {
        ret = 'transparent';
      }
    } else if (variant == theme.variants.secondary) {
      if (type == theme.types.filled) {
        ret = theme.colors.secondaryBgColor;
      } else if (type == theme.types.outlined) {
        ret = 'transparent';
      }
    } else if (variant == theme.variants.danger) {
      if (type == theme.types.filled) {
        ret = theme.colors.dangerBgColor;
      } else if (type == theme.types.outlined) {
        ret = 'transparent';
      }
    } else if (variant == theme.variants.success) {
      if (type == theme.types.filled) {
        ret = theme.colors.successBgColor;
      } else if (type == theme.types.outlined) {
        ret = 'transparent';
      }
    } else if (variant == theme.variants.warning) {
      if (type == theme.types.filled) {
        ret = theme.colors.warningBgColor;
      } else if (type == theme.types.outlined) {
        ret = 'transparent';
      }
    } else if (variant == theme.variants.info) {
      if (type == theme.types.filled) {
        ret = theme.colors.infoBgColor;
      } else if (type == theme.types.outlined) {
        ret = 'transparent';
      }
    } else if (variant == theme.variants.light) {
      if (type == theme.types.filled) {
        ret = theme.colors.lightBgColor;
      } else if (type == theme.types.outlined) {
        ret = 'transparent';
      }
    } else if (variant == theme.variants.dark) {
      if (type == theme.types.filled) {
        ret = theme.colors.darkBgColor;
      } else if (type == theme.types.outlined) {
        ret = 'transparent';
      }
    }
    return ret;
  },
  getBorderColor: function getBorderColor(theme, variant, type) {
    var ret = null;
    if (variant == theme.variants.primary) {
      if (type == theme.types.filled) {
        ret = theme.colors.primaryBgColor;
      } else if (type == theme.types.outlined) {
        ret = theme.colors.primaryBgColor;
      }
    } else if (variant == theme.variants.secondary) {
      if (type == theme.types.filled) {
        ret = theme.colors.secondaryBgColor;
      } else if (type == theme.types.outlined) {
        ret = theme.colors.secondaryBgColor;
      }
    } else if (variant == theme.variants.danger) {
      if (type == theme.types.filled) {
        ret = theme.colors.dangerBgColor;
      } else if (type == theme.types.outlined) {
        ret = theme.colors.dangerBgColor;
      }
    } else if (variant == theme.variants.success) {
      if (type == theme.types.filled) {
        ret = theme.colors.successBgColor;
      } else if (type == theme.types.outlined) {
        ret = theme.colors.successBgColor;
      }
    } else if (variant == theme.variants.warning) {
      if (type == theme.types.filled) {
        ret = theme.colors.warningBgColor;
      } else if (type == theme.types.outlined) {
        ret = theme.colors.warningBgColor;
      }
    } else if (variant == theme.variants.info) {
      if (type == theme.types.filled) {
        ret = theme.colors.infoBgColor;
      } else if (type == theme.types.outlined) {
        ret = theme.colors.infoBgColor;
      }
    } else if (variant == theme.variants.light) {
      if (type == theme.types.filled) {
        ret = theme.colors.lightBgColor;
      } else if (type == theme.types.outlined) {
        ret = theme.colors.lightBgColor;
      }
    } else if (variant == theme.variants.dark) {
      if (type == theme.types.filled) {
        ret = theme.colors.darkBgColor;
      } else if (type == theme.types.outlined) {
        ret = theme.colors.darkBgColor;
      }
    }
    return ret;
  }
};

var SfButton = function SfButton(_ref) {
  var variant = _ref.variant,
    type = _ref.type,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    caption = _ref.caption,
    _onClick = _ref.onClick,
    _ref$theme = _ref.theme,
    theme = _ref$theme === void 0 ? Themes.getTheme() : _ref$theme,
    _ref$icon = _ref.icon,
    icon = _ref$icon === void 0 ? null : _ref$icon,
    _ref$className = _ref.className,
    className = _ref$className === void 0 ? '' : _ref$className,
    _ref$styles = _ref.styles,
    styles = _ref$styles === void 0 ? {} : _ref$styles;
  var _useState = useState('none'),
    borderColor = _useState[0],
    setBorderColor = _useState[1];
  var _useState2 = useState('none'),
    backgroundColor = _useState2[0],
    setBackgroundColor = _useState2[1];
  var _useState3 = useState('none'),
    textColor = _useState3[0],
    setTextColor = _useState3[1];
  var mounted = useRef(false);
  function resetColors() {
    if (mounted.current) {
      setTextColor(Util.getTextColor(theme, variant, type));
      setBackgroundColor(Util.getBackgroundColor(theme, variant, type));
      setBorderColor(Util.getBorderColor(theme, variant, type));
    }
  }
  function invertColors() {
    if (mounted.current) {
      setTextColor(styles.backgroundColor != null ? styles.backgroundColor : Util.getTextColor(theme, variant, type == theme.types.filled ? theme.types.outlined : theme.types.filled));
      setBackgroundColor(styles.color != null ? styles.color : Util.getBackgroundColor(theme, variant, type == theme.types.filled ? theme.types.outlined : theme.types.filled));
      setBorderColor(Util.getBorderColor(theme, variant, type == theme.types.filled ? theme.types.outlined : theme.types.filled));
    }
  }
  var _onTouchStart = function onTouchStart(value) {
    if (value) {
      invertColors();
    } else {
      setTimeout(function () {
        resetColors();
      }, 300);
    }
  };
  useEffect(function () {
    mounted.current = true;
    return function () {
      mounted.current = false;
    };
  }, []);
  useEffect(function () {
    resetColors();
  }, []);
  return createElement("button", {
    className: "sf_btn " + className,
    style: _extends({
      cursor: 'pointer',
      backgroundColor: styles.backgroundColor != null ? styles.backgroundColor : backgroundColor,
      color: styles.color != null ? styles.color : textColor,
      border: 'solid 1px ' + borderColor,
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      paddingLeft: theme.spaces.ltl + 'px',
      paddingRight: theme.spaces.ltl + 'px',
      paddingTop: theme.spaces.min + 'px',
      paddingBottom: theme.spaces.min + 'px',
      borderRadius: theme.spaces.min + 'px',
      filter: disabled ? 'grayscale(70%)' : 'none',
      fontWeight: '600',
      fontFamily: 'inherit'
    }, styles),
    disabled: disabled,
    onTouchStart: function onTouchStart() {
      _onTouchStart(true);
    },
    onMouseDown: function onMouseDown() {
      _onTouchStart(true);
    },
    onTouchEnd: function onTouchEnd() {
      _onTouchStart(false);
    },
    onMouseUp: function onMouseUp() {
      _onTouchStart(false);
    },
    onClick: function onClick(event) {
      _onClick(event);
    }
  }, caption, icon != null && createElement("span", {
    style: {
      paddingTop: '3px'
    }
  }, "\xA0", icon));
};

var getCountryCodes = function getCountryCodes() {
  try {
    return Promise.resolve(fetch('https://superflows-myuploads.s3.ap-south-1.amazonaws.com/countries_dialcodes_flags.json')).then(function (response) {
      return Promise.resolve(response.json());
    });
  } catch (e) {
    return Promise.reject(e);
  }
};
var exportFunctions = {
  getCountryCodes: getCountryCodes
};

var SfInput = function SfInput(_ref) {
  var populateCountryCodes = function populateCountryCodes() {
    try {
      var _temp2 = function () {
        if (mounted.current) {
          return Promise.resolve(exportFunctions.getCountryCodes()).then(function (result) {
            var arr = [];
            for (var i = 0; i < result.length; i++) {
              if (result[i].name.toLowerCase().indexOf(countryCodesSearchString.toLowerCase()) >= 0) {
                arr.push(result[i]);
              }
            }
            setCountryCodesWrap(arr);
          });
        }
      }();
      return Promise.resolve(_temp2 && _temp2.then ? _temp2.then(function () {}) : void 0);
    } catch (e) {
      return Promise.reject(e);
    }
  };
  var variant = _ref.variant,
    caption = _ref.caption,
    inputType = _ref.inputType,
    onComplete = _ref.onComplete,
    _ref$value = _ref.value,
    value = _ref$value === void 0 ? "" : _ref$value,
    _ref$hint = _ref.hint,
    hint = _ref$hint === void 0 ? "" : _ref$hint,
    _ref$onEnterPressed = _ref.onEnterPressed,
    onEnterPressed = _ref$onEnterPressed === void 0 ? function () {} : _ref$onEnterPressed,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    _ref$autoFocus = _ref.autoFocus,
    autoFocus = _ref$autoFocus === void 0 ? false : _ref$autoFocus,
    _ref$mode = _ref.mode,
    mode = _ref$mode === void 0 ? Themes.getTheme().modes.day : _ref$mode,
    _ref$theme = _ref.theme,
    theme = _ref$theme === void 0 ? Themes.getTheme() : _ref$theme,
    _ref$icon = _ref.icon,
    icon = _ref$icon === void 0 ? null : _ref$icon,
    _ref$classNameContain = _ref.classNameContainer,
    classNameContainer = _ref$classNameContain === void 0 ? '' : _ref$classNameContain,
    _ref$classNameInput = _ref.classNameInput,
    classNameInput = _ref$classNameInput === void 0 ? '' : _ref$classNameInput,
    _ref$stylesContainer = _ref.stylesContainer,
    stylesContainer = _ref$stylesContainer === void 0 ? {} : _ref$stylesContainer,
    _ref$stylesInput = _ref.stylesInput,
    stylesInput = _ref$stylesInput === void 0 ? {} : _ref$stylesInput;
  var _useState = useState('none'),
    borderColor = _useState[0],
    setBorderColor = _useState[1];
  var _useState2 = useState('none'),
    textColor = _useState2[0],
    setTextColor = _useState2[1];
  var _useState3 = useState(false),
    showCountryCodes = _useState3[0],
    setShowCountryCodes = _useState3[1];
  var _useState4 = useState(false),
    showDatePicker = _useState4[0],
    setShowDatePicker = _useState4[1];
  var _useState5 = useState('text'),
    ipType = _useState5[0],
    setIpType = _useState5[1];
  var _useState6 = useState('[]'),
    countryCodes = _useState6[0],
    setCountryCodes = _useState6[1];
  var _useState7 = useState(''),
    countryCodesSearchString = _useState7[0],
    setCountryCodesSearchString = _useState7[1];
  var _useState8 = useState('{}'),
    selectedCountryCode = _useState8[0],
    setSelectedCountryCode = _useState8[1];
  var _useState9 = useState(false),
    prefillLoaded = _useState9[0],
    setPrefillLoaded = _useState9[1];
  var _useState10 = useState(''),
    dd = _useState10[0],
    setDD = _useState10[1];
  var _useState11 = useState(''),
    mm = _useState11[0],
    setMM = _useState11[1];
  var _useState12 = useState(''),
    yyyy = _useState12[0],
    setYYYY = _useState12[1];
  var _useState13 = useState(''),
    lastKey = _useState13[0],
    setLastKey = _useState13[1];
  var _useState14 = useState(new Date().getFullYear()),
    selectedYYYY = _useState14[0],
    setSelectedYYYY = _useState14[1];
  var _useState15 = useState(1),
    selectedMM = _useState15[0],
    setSelectedMM = _useState15[1];
  var _useState16 = useState(1),
    selectedDD = _useState16[0],
    setSelectedDD = _useState16[1];
  var refInput = useRef();
  var refInputDD = useRef();
  var refInputMM = useRef();
  var refInputYYYY = useRef();
  var arrYears = [];
  var arrMonths = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
  var mounted = useRef(false);
  function setShowDatePickerWrap(value) {
    if (mounted.current) {
      setTimeout(function () {
        setShowDatePicker(value);
      }, 500);
    }
  }
  function setSelectedMMWrap(value) {
    if (mounted.current) {
      setSelectedMM(value);
      setSelectedDDWrap(0);
      if (value > 0) {
        refInputMM.current.value = value;
      } else {
        refInputMM.current.value = "";
      }
      refInputYYYY.current.value = selectedYYYY;
    }
  }
  function setSelectedYYYYWrap(value) {
    if (mounted.current) {
      setSelectedYYYY(value);
      setSelectedMMWrap(0);
      if (value > 0) {
        refInputYYYY.current.value = value;
      }
    }
  }
  function setSelectedDDWrap(value) {
    if (mounted.current) {
      setSelectedDD(value);
      if (value > 0) {
        refInputDD.current.value = value;
      } else {
        refInputDD.current.value = "";
      }
      refInputMM.current.value = selectedMM;
      refInputYYYY.current.value = selectedYYYY;
    }
  }
  for (var i = new Date().getFullYear(); i >= 1960; i--) {
    arrYears.push(i);
  }
  function setShowCountryCodesWrap(value) {
    if (mounted.current) {
      setTimeout(function () {
        setShowCountryCodes(value);
      }, 200);
    }
  }
  function setSelectedCountryCodeWrap(value) {
    if (mounted.current) {
      setSelectedCountryCode(JSON.stringify(value));
    }
  }
  function getSelectedCountryCodeWrap() {
    return JSON.parse(selectedCountryCode);
  }
  function setCountryCodesWrap(value) {
    if (mounted.current) {
      setCountryCodes(JSON.stringify(value));
    }
  }
  function getCountryCodesWrap() {
    return JSON.parse(countryCodes);
  }
  function resetColors() {
    if (mode == theme.modes.day) {
      setBorderColor(Util.shadeColor(Util.getBorderColor(theme, variant, theme.types.outlined), 140));
      setTextColor(Util.getTextColor(theme, variant, theme.types.outlined));
    } else {
      setBorderColor(Util.getBorderColor(theme, variant, theme.types.outlined));
      setTextColor(Util.shadeColor(Util.getTextColor(theme, variant, theme.types.outlined), 140));
    }
  }
  function resetType() {
    if (inputType == theme.inputTypes.name) {
      setIpType("text");
    }
    if (inputType == theme.inputTypes.email) {
      setIpType("email");
    }
    if (inputType == theme.inputTypes.mobile) {
      setIpType("number");
    }
    if (inputType == theme.inputTypes.dateOfBirth) {
      setIpType("number");
    }
    if (inputType == theme.inputTypes.date) {
      setIpType("number");
    }
  }
  function resetFocus() {
    if (autoFocus) {
      if (theme.inputTypes.dateOfBirth == inputType || theme.inputTypes.date == inputType) {
        refInputDD.current.focus();
      } else {
        refInput.current.focus();
      }
    }
  }
  function setFocus() {
    refInput.current.focus();
  }
  function onClickIsd() {
    if (mounted.current) {
      if (showCountryCodes) {
        setShowCountryCodesWrap(false);
      } else {
        setShowCountryCodesWrap(true);
      }
    }
  }
  function onChangeCountryCodesSearchString(e) {
    if (mounted.current) {
      setCountryCodesSearchString(e.target.value);
    }
  }
  function onSubmitCountryCode() {
    if (Util.validateMobile(refInput.current.value) && selectedCountryCode != "{}") {
      onComplete(JSON.stringify({
        isd: getSelectedCountryCodeWrap().dialCode,
        number: refInput.current.value
      }));
      resetColors();
    } else {
      setBorderColor(theme.colors.dangerBgColor);
      onComplete('');
    }
  }
  var _onKeyUp = function onKeyUp(event) {
    if (mounted.current) {
      if (inputType == theme.inputTypes.name) {
        if (Util.validateName(event.target.value)) {
          onComplete(event.target.value);
          resetColors();
          if (event.key == "Enter") onEnterPressed();
        } else {
          setBorderColor(theme.colors.dangerBgColor);
          onComplete('');
        }
      }
      if (inputType == theme.inputTypes.email) {
        if (Util.validateEmail(event.target.value)) {
          onComplete(event.target.value);
          resetColors();
          if (event.key == "Enter") onEnterPressed();
        } else {
          setBorderColor(theme.colors.dangerBgColor);
          onComplete('');
        }
      }
      if (inputType == theme.inputTypes.mobile) {
        if (Util.validateMobile(event.target.value) && selectedCountryCode != "{}") {
          onComplete(JSON.stringify({
            isd: getSelectedCountryCodeWrap().dialCode,
            number: event.target.value
          }));
          resetColors();
          if (event.key == "Enter") onEnterPressed();
        } else {
          setBorderColor(theme.colors.dangerBgColor);
          onComplete('');
        }
      }
      if (inputType == theme.inputTypes.dateOfBirth) {
        if (Util.validateDDMMYYYY(dd, mm, yyyy)) {
          var dateVal = parseInt(Date.parse(yyyy + "-" + mm + "-" + dd) / 1000 + "");
          onComplete(dateVal + "");
          if (lastKey == "Enter") onEnterPressed();
          resetColors();
        } else {
          if (dd == "" && mm == "" && yyyy == "") {
            resetColors();
          } else {
            setBorderColor(theme.colors.dangerBgColor);
          }
          onComplete("");
        }
      }
    }
  };
  var onKeyUpDD = function onKeyUpDD(event) {
    if (mounted.current) {
      setLastKey(event.key);
      setDD(event.target.value + "");
      _onKeyUp(event);
    }
  };
  var onKeyUpMM = function onKeyUpMM(event) {
    if (mounted.current) {
      setLastKey(event.key);
      setMM(event.target.value + "");
      _onKeyUp(event);
    }
  };
  var onKeyUpYYYY = function onKeyUpYYYY(event) {
    if (mounted.current) {
      setLastKey(event.key);
      setYYYY(event.target.value + "");
      _onKeyUp(event);
    }
  };
  useEffect(function () {
    if (inputType == theme.inputTypes.dateOfBirth) {
      _onKeyUp(null);
    }
  }, [dd, mm, yyyy]);
  useEffect(function () {
    if (!prefillLoaded) {
      if (value.isd != null) {
        for (var i = 0; i < getCountryCodesWrap().length; i++) {
          if (value.isd == getCountryCodesWrap()[i].dialCode) {
            setSelectedCountryCodeWrap(getCountryCodesWrap()[i]);
            setPrefillLoaded(true);
            break;
          }
        }
      }
    }
  }, [countryCodes]);
  useEffect(function () {
    resetColors();
    resetType();
    resetFocus();
    if (inputType == theme.inputTypes.mobile) {
      populateCountryCodes();
    }
    if (inputType == theme.inputTypes.date) {
      if (value.dd != null) {
        setSelectedDD(parseInt(value.dd + ""));
      }
      if (value.mm != null) {
        setSelectedMM(parseInt(value.mm + ""));
      }
      if (value.yyyy != null) {
        setSelectedYYYY(parseInt(value.yyyy + ""));
      }
    }
  }, []);
  useEffect(function () {
    mounted.current = true;
    return function () {
      mounted.current = false;
    };
  }, []);
  useEffect(function () {
    if (selectedCountryCode == "{}") ; else {
      setCountryCodesSearchString('');
      setShowCountryCodesWrap(false);
      onSubmitCountryCode();
    }
  }, [selectedCountryCode]);
  useEffect(function () {
    populateCountryCodes();
  }, [countryCodesSearchString]);
  return createElement("div", {
    className: "sf_input " + classNameContainer,
    style: _extends({
      color: textColor,
      border: 'solid 1px ' + borderColor,
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      maxWidth: '100%',
      padding: theme.spaces.ltl + 'px',
      borderRadius: theme.spaces.min + 'px',
      filter: disabled ? 'grayscale(70%)' : 'none',
      fontWeight: '600'
    }, stylesContainer)
  }, icon != null && icon, icon != null && createElement("span", null, "\xA0\xA0"), createElement("span", {
    className: 'sf_input_caption',
    onClick: function onClick() {
      setFocus();
    }
  }, caption), createElement("span", null, "\xA0\xA0\xA0"), inputType == theme.inputTypes.mobile && createElement("div", {
    style: {
      display: 'flex',
      flexDirection: 'column'
    }
  }, createElement(SfButton, {
    variant: variant,
    type: 'filled',
    caption: selectedCountryCode == "{}" ? showCountryCodes ? "ISD ▲" : "ISD ▼" : getSelectedCountryCodeWrap().dialCode + " " + getSelectedCountryCodeWrap().emoji + " " + (showCountryCodes ? "▲" : ""),
    onClick: function onClick() {
      onClickIsd();
    },
    styles: {
      cursor: 'pointer',
      fontSize: '70%',
      marginRight: theme.spaces.ltl + 'px'
    },
    disabled: disabled
  }), showCountryCodes && createElement("div", {
    style: {
      position: 'fixed',
      bottom: '0px',
      left: '0px',
      width: '100%',
      backgroundColor: mode == theme.modes.day ? '#efefef' : 'black',
      color: mode == theme.modes.day ? 'black' : '#ffffff',
      textAlign: 'left',
      boxShadow: '0px -2px 10px #dddddd',
      zIndex: 1999
    }
  }, createElement("div", {
    style: {
      display: 'flex',
      justifyContent: 'space-between',
      alignItems: 'center'
    }
  }, createElement("input", {
    className: 'input_search',
    type: "text",
    placeholder: 'Search',
    onChange: function onChange(e) {
      onChangeCountryCodesSearchString(e);
    },
    style: {
      backgroundColor: 'transparent',
      border: 'none',
      marginLeft: theme.spaces.ltl + 'px',
      marginTop: theme.spaces.ltl + 'px',
      marginBottom: parseInt(theme.spaces.ltl) * 2 + 'px',
      borderBottom: 'solid 1px ' + (theme.modes.day ? '#bbbbbb' : '#333333'),
      flexGrow: '1'
    },
    disabled: disabled
  }), createElement(SfButton, {
    className: 'sf_btn_countries_close',
    variant: variant,
    type: 'filled',
    caption: 'Close ▲',
    onClick: function onClick() {
      onClickIsd();
    },
    styles: {
      cursor: 'pointer',
      fontSize: '70%',
      marginRight: theme.spaces.ltl + 'px',
      marginLeft: theme.spaces.ltl + 'px',
      marginTop: theme.spaces.ltl + 'px',
      marginBottom: parseInt(theme.spaces.ltl) * 2 + 'px'
    }
  })), createElement("div", {
    style: {
      display: 'flex',
      flexWrap: 'wrap',
      height: '200px',
      overflowY: 'auto',
      textAlign: 'left',
      alignItems: 'flex-start',
      paddingLeft: theme.spaces.ltl + 'px',
      paddingRight: theme.spaces.ltl + 'px'
    }
  }, getCountryCodesWrap().map(function (element, key) {
    return createElement("div", {
      className: 'div_' + element.code,
      key: key,
      style: {
        fontSize: '80%',
        fontWeight: '200',
        cursor: 'pointer',
        marginRight: theme.spaces.ltl + 'px',
        marginBottom: theme.spaces.ltl + 'px',
        backgroundColor: mode == theme.modes.day ? '#ffffff' : '#222222',
        paddingLeft: theme.spaces.ltl + 'px',
        paddingRight: theme.spaces.ltl + 'px',
        borderRadius: theme.spaces.min + 'px'
      },
      onClick: function onClick() {
        setSelectedCountryCodeWrap(element);
      }
    }, element.emoji, "\xA0\xA0", element.name.substr(0, 20));
  })))), (inputType == theme.inputTypes.dateOfBirth || inputType == theme.inputTypes.date) && createElement("div", {
    style: {
      flexGrow: "1",
      display: 'flex',
      justifyContent: 'flex-end'
    }
  }, createElement("input", {
    className: "sf_input_" + inputType + "_dd " + classNameInput,
    onClick: function onClick() {
      if (inputType == theme.inputTypes.date) {
        setShowDatePickerWrap(true);
      }
    },
    ref: refInputDD,
    style: _extends({
      width: '50px',
      margin: '0',
      borderLeft: 'none',
      borderTop: 'none',
      borderRight: 'none',
      borderBottom: 'none',
      marginRight: theme.spaces.min + 'px',
      borderRadius: theme.spaces.min + 'px',
      textAlign: 'center'
    }, stylesInput),
    onKeyUp: onKeyUpDD,
    type: ipType,
    placeholder: "DD",
    disabled: disabled,
    readOnly: inputType == theme.inputTypes.date ? true : false,
    defaultValue: value.dd
  }), createElement("input", {
    className: "sf_input_" + inputType + "_mm " + classNameInput,
    onClick: function onClick() {
      if (inputType == theme.inputTypes.date) {
        setShowDatePickerWrap(true);
      }
    },
    ref: refInputMM,
    style: _extends({
      width: '50px',
      margin: '0',
      borderLeft: 'none',
      borderTop: 'none',
      borderRight: 'none',
      borderBottom: 'none',
      marginRight: theme.spaces.min + 'px',
      borderRadius: theme.spaces.min + 'px',
      textAlign: 'center'
    }, stylesInput),
    onKeyUp: onKeyUpMM,
    type: ipType,
    placeholder: "MM",
    disabled: disabled,
    readOnly: inputType == theme.inputTypes.date ? true : false,
    defaultValue: value.mm
  }), createElement("input", {
    className: "sf_input_" + inputType + "_yyyy " + classNameInput,
    onClick: function onClick() {
      if (inputType == theme.inputTypes.date) {
        setShowDatePickerWrap(true);
      }
    },
    ref: refInputYYYY,
    style: _extends({
      width: '80px',
      margin: '0',
      borderLeft: 'none',
      borderTop: 'none',
      borderRight: 'none',
      borderBottom: 'none',
      textAlign: 'center',
      borderRadius: theme.spaces.min + 'px'
    }, stylesInput),
    onKeyUp: onKeyUpYYYY,
    type: ipType,
    placeholder: "YYYY",
    disabled: disabled,
    readOnly: inputType == theme.inputTypes.date ? true : false,
    defaultValue: value.yyyy
  }), showDatePicker && createElement("div", {
    className: "sf_input_date_picker",
    style: {
      position: 'fixed',
      bottom: '0px',
      left: '0px',
      width: '100%',
      backgroundColor: mode == theme.modes.day ? '#efefef' : 'black',
      color: mode == theme.modes.day ? 'black' : '#ffffff',
      textAlign: 'left',
      boxShadow: '0px -2px 10px #dddddd',
      zIndex: 1999
    }
  }, createElement("div", {
    style: {
      display: 'flex',
      justifyContent: 'space-between',
      textAlign: 'center',
      alignItems: 'center',
      marginBottom: theme.spaces.ltl + 'px'
    }
  }, createElement(SfButton, {
    styles: {
      visibility: 'hidden',
      marginLeft: theme.spaces.ltl + 'px',
      marginTop: theme.spaces.ltl + 'px'
    },
    className: 'sf_btn_date_close',
    variant: variant,
    type: 'filled',
    caption: '▲',
    onClick: function onClick() {}
  }), createElement("div", {
    style: {
      display: 'flex'
    }
  }, createElement("div", {
    style: {
      marginTop: theme.spaces.ltl + 'px',
      marginLeft: theme.spaces.ltl + 'px',
      marginRight: theme.spaces.ltl + 'px',
      paddingLeft: theme.spaces.min + 'px',
      paddingRight: theme.spaces.min + 'px',
      paddingBottom: '2px',
      border: 'solid 1px ' + (mode == theme.modes.day ? '#000000' : '#ffffff'),
      backgroundColor: mode == theme.modes.day ? '#ffffff' : '#000000',
      color: mode == theme.modes.day ? '#000000' : '#ffffff',
      borderRadius: theme.spaces.min + 'px'
    }
  }, createElement("small", null, selectedYYYY)), createElement("div", {
    style: {
      width: '97px',
      marginTop: theme.spaces.ltl + 'px',
      marginLeft: theme.spaces.ltl + 'px',
      marginRight: theme.spaces.ltl + 'px',
      paddingLeft: theme.spaces.min + 'px',
      paddingRight: theme.spaces.min + 'px',
      paddingBottom: '2px',
      border: 'solid 1px ' + (mode == theme.modes.day ? '#000000' : '#ffffff'),
      backgroundColor: mode == theme.modes.day ? '#ffffff' : '#000000',
      color: mode == theme.modes.day ? '#000000' : '#ffffff',
      borderRadius: theme.spaces.min + 'px'
    }
  }, createElement("small", null, selectedMM === 0 ? "" : Util.toMonthName(selectedMM))), createElement("div", {
    style: {
      width: '30px',
      marginTop: theme.spaces.ltl + 'px',
      marginLeft: theme.spaces.ltl + 'px',
      marginRight: theme.spaces.ltl + 'px',
      paddingLeft: theme.spaces.min + 'px',
      paddingRight: theme.spaces.min + 'px',
      paddingBottom: '2px',
      border: 'solid 1px ' + (mode == theme.modes.day ? '#000000' : '#ffffff'),
      backgroundColor: mode == theme.modes.day ? '#ffffff' : '#000000',
      color: mode == theme.modes.day ? '#000000' : '#ffffff',
      borderRadius: theme.spaces.min + 'px'
    }
  }, createElement("small", null, selectedDD === 0 ? "" : selectedDD))), createElement(SfButton, {
    styles: {
      cursor: 'pointer',
      marginRight: theme.spaces.ltl + 'px',
      marginTop: theme.spaces.ltl + 'px'
    },
    className: 'sf_btn_date_close',
    variant: variant,
    type: 'filled',
    caption: '▲',
    onClick: function onClick() {
      setShowDatePickerWrap(false);
    }
  })), createElement("div", {
    style: {
      display: 'flex',
      justifyContent: 'center'
    }
  }, createElement("div", {
    style: {
      height: '150px',
      overflowY: 'auto'
    }
  }, arrYears.map(function (year) {
    return createElement("div", {
      className: "year_" + year,
      onClick: function onClick() {
        setSelectedYYYYWrap(year);
      },
      key: year,
      style: {
        cursor: 'pointer',
        marginTop: theme.spaces.ltl + 'px',
        marginLeft: theme.spaces.ltl + 'px',
        marginRight: theme.spaces.ltl + 'px',
        paddingLeft: theme.spaces.min + 'px',
        paddingRight: theme.spaces.min + 'px',
        paddingBottom: '2px',
        backgroundColor: mode == theme.modes.day ? '#ffffff' : selectedYYYY == year ? '#ffffff' : '#444444',
        color: mode != theme.modes.day ? selectedYYYY == year ? '#444444' : '#ffffff' : selectedYYYY == year ? '#000000' : '#888888',
        borderRadius: theme.spaces.min + 'px'
      }
    }, createElement("small", null, year));
  })), createElement("div", {
    style: {
      height: '150px',
      overflowY: 'auto'
    }
  }, arrMonths.map(function (month) {
    return createElement("div", {
      className: "month_" + month,
      onClick: function onClick() {
        setSelectedMMWrap(month);
      },
      key: month,
      style: {
        cursor: 'pointer',
        width: '100px',
        textAlign: 'center',
        marginTop: theme.spaces.ltl + 'px',
        marginLeft: theme.spaces.ltl + 'px',
        marginRight: theme.spaces.ltl + 'px',
        paddingLeft: theme.spaces.min + 'px',
        paddingRight: theme.spaces.min + 'px',
        paddingBottom: '2px',
        backgroundColor: mode == theme.modes.day ? '#ffffff' : selectedMM == month ? '#ffffff' : '#444444',
        color: mode != theme.modes.day ? selectedMM == month ? '#444444' : '#ffffff' : selectedMM == month ? '#000000' : '#888888',
        borderRadius: theme.spaces.min + 'px'
      }
    }, createElement("small", null, Util.toMonthName(month)));
  })), createElement("div", {
    style: {
      height: '150px',
      overflowY: 'auto'
    }
  }, Util.getDaysInMonthUTC(selectedMM - 1, selectedYYYY).map(function (day) {
    return createElement("div", {
      className: "date_" + day.getDate(),
      onClick: function onClick() {
        setSelectedDDWrap(day.getDate());
      },
      key: day.getDate(),
      style: {
        cursor: 'pointer',
        width: '30px',
        textAlign: 'center',
        marginTop: theme.spaces.ltl + 'px',
        marginLeft: theme.spaces.ltl + 'px',
        marginRight: theme.spaces.ltl + 'px',
        paddingLeft: theme.spaces.min + 'px',
        paddingRight: theme.spaces.min + 'px',
        paddingBottom: '2px',
        backgroundColor: mode == theme.modes.day ? '#ffffff' : selectedDD == day.getDate() ? '#ffffff' : '#444444',
        color: mode != theme.modes.day ? selectedDD == day.getDate() ? '#444444' : '#ffffff' : selectedDD == day.getDate() ? '#000000' : '#888888',
        borderRadius: theme.spaces.min + 'px'
      }
    }, createElement("small", null, day.getDate()));
  }))))), inputType != theme.inputTypes.dateOfBirth && inputType != theme.inputTypes.date && createElement("input", {
    className: "sf_input_" + inputType + " " + classNameInput,
    ref: refInput,
    style: _extends({
      flexGrow: '1',
      margin: '0',
      borderLeft: 'none',
      borderTop: 'none',
      borderRight: 'none',
      borderBottom: 'none',
      paddingLeft: theme.spaces.ltl + 'px',
      borderRadius: theme.spaces.min + 'px'
    }, stylesInput),
    type: ipType,
    onKeyUp: function onKeyUp(event) {
      _onKeyUp(event);
    },
    placeholder: hint,
    disabled: disabled,
    defaultValue: inputType != theme.inputTypes.mobile ? value : value.number
  }));
};

var Constants = {
  DEFAULT_BRAND_ICON: "",
  DEFAULT_PROFILE_PICTURE: "",
  DEFAULT_BRAND_NAME: "Superflows",
  DEFAULT_MENU: [{
    caption: "About",
    link: "about"
  }, [{
    caption: "Solutions",
    link: "solutions"
  }, {
    caption: "Products",
    link: "products"
  }, {
    caption: "Services",
    link: "services"
  }, {
    caption: "Resources",
    link: "resources"
  }], [{
    caption: "Contact",
    link: "contact"
  }, {
    caption: 'Instagram',
    link: "instagram"
  }, {
    caption: "Facebook",
    link: "facebook"
  }]],
  DEFAULT_NOTIFICATION_LIST: [{
    id: 1,
    title: "First one!",
    description: 'This is the description of the firs notification.',
    timestampReceived: "2 days ago",
    read: false
  }, {
    id: 2,
    title: "2nd notification",
    description: 'Displaying notifications is super simple!',
    timestampReceived: "5 days ago",
    read: true
  }, {
    id: 3,
    title: "Get started now",
    description: 'Create the notification list using a simple JSON array and your job is done.',
    timestampReceived: "1 month ago",
    read: false
  }],
  DEFAULT_BANNER_TEXT: "⭐️ Give us a star on Github!",
  DEFAULT_BANNER_TEXT_MOBILE: "⭐️ Give us a star!",
  DEFAULT_BANNER_CTA: "View on GitHub",
  DEFAULT_BANNER_CTA_MOBILE: "GitHub",
  DEFAULT_LINK_HOME: "home"
};

var ContextSfNav = React__default.createContext({
  navigateTo: function navigateTo(_ref) {
  },
  navigationData: {
    link: "",
    component: null,
    args: null
  }
});
var ContextSfNavProvider = ContextSfNav.Provider;

function getWindowDimensions() {
  var _window = window,
    width = _window.innerWidth,
    height = _window.innerHeight;
  return {
    width: width,
    height: height
  };
}
var Banner = function Banner(_ref) {
  var variant = _ref.variant,
    theme = _ref.theme,
    _ref$bannerCta = _ref.bannerCta,
    bannerCta = _ref$bannerCta === void 0 ? Constants.DEFAULT_BANNER_CTA : _ref$bannerCta,
    bannerComponent = _ref.bannerComponent,
    bannerEnableDismiss = _ref.bannerEnableDismiss,
    _ref$bannerText = _ref.bannerText,
    bannerText = _ref$bannerText === void 0 ? Constants.DEFAULT_BANNER_TEXT : _ref$bannerText,
    showBanner = _ref.showBanner,
    _ref$onBannerCtaPress = _ref.onBannerCtaPressed,
    onBannerCtaPressed = _ref$onBannerCtaPress === void 0 ? function () {} : _ref$onBannerCtaPress,
    stylesBannerContainer = _ref.stylesBannerContainer,
    stylesBannerCta = _ref.stylesBannerCta,
    stylesBannerText = _ref.stylesBannerText,
    classNameBannerContainer = _ref.classNameBannerContainer,
    classNameBannerCta = _ref.classNameBannerCta,
    classNameBannerText = _ref.classNameBannerText;
  var _useState = useState(true),
    displayBanner = _useState[0],
    setDisplayBanner = _useState[1];
  return createElement("div", null, showBanner && displayBanner && bannerComponent == null && createElement("div", {
    className: classNameBannerContainer,
    style: _extends({
      position: 'relative',
      paddingTop: theme.spaces.min + 'px',
      paddingBottom: theme.spaces.min + 'px',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      fontSize: '90%',
      backgroundColor: Util.getBackgroundColor(theme, variant, theme.types.filled),
      color: Util.getTextColor(theme, variant, theme.types.filled),
      fontWeight: '600'
    }, stylesBannerContainer)
  }, createElement("div", {
    className: classNameBannerText,
    style: _extends({
      marginLeft: theme.spaces.mod + 'px',
      marginRight: theme.spaces.mod + 'px'
    }, stylesBannerText)
  }, bannerText), createElement("div", {
    style: {
      display: "flex",
      alignItems: 'center'
    }
  }, createElement("div", {
    style: {
      marginLeft: theme.spaces.min + 'px',
      marginRight: theme.spaces.min + 'px'
    }
  }, createElement(SfButton, {
    className: 'banner_cta ' + classNameBannerCta,
    variant: theme.variants.light,
    type: theme.types.outlined,
    caption: bannerCta,
    onClick: function onClick() {
      onBannerCtaPressed();
    },
    styles: _extends({
      paddingTop: '2px',
      paddingBottom: '2px'
    }, stylesBannerCta)
  })), bannerEnableDismiss && createElement("div", {
    className: 'banner_dismiss',
    style: {
      marginLeft: theme.spaces.min + 'px',
      marginRight: theme.spaces.min + 'px',
      cursor: 'pointer'
    },
    onClick: function onClick() {
      setDisplayBanner(false);
    }
  }, "\u2715"))), showBanner && displayBanner && bannerComponent != null && bannerComponent);
};
var Profile = function Profile(_ref2) {
  var clickMenu = _ref2.clickMenu,
    toggleExpandProfile = _ref2.toggleExpandProfile,
    toggleProfileDropdownExpandedWrap = _ref2.toggleProfileDropdownExpandedWrap,
    getProfileDropdownExpandedWrap = _ref2.getProfileDropdownExpandedWrap,
    setExpandProfile = _ref2.setExpandProfile,
    theme = _ref2.theme,
    variant = _ref2.variant,
    profilePicture = _ref2.profilePicture,
    expandProfile = _ref2.expandProfile,
    profilePreamble = _ref2.profilePreamble,
    profileComponent = _ref2.profileComponent,
    profileMenu = _ref2.profileMenu,
    classNameProfileComponent = _ref2.classNameProfileComponent,
    classNameSubMenuMobile = _ref2.classNameSubMenuMobile,
    classNameMenuMobileSelected = _ref2.classNameMenuMobileSelected,
    classNameMenuMobile = _ref2.classNameMenuMobile,
    classNameProfilePreamble = _ref2.classNameProfilePreamble,
    classNameProfilePicture = _ref2.classNameProfilePicture,
    classNameProfilePictureContainer = _ref2.classNameProfilePictureContainer,
    stylesProfileComponent = _ref2.stylesProfileComponent,
    stylesProfilePreamble = _ref2.stylesProfilePreamble,
    stylesMenuMobileSelected = _ref2.stylesMenuMobileSelected,
    stylesMenuMobile = _ref2.stylesMenuMobile,
    stylesSubMenuMobile = _ref2.stylesSubMenuMobile,
    stylesProfilePicture = _ref2.stylesProfilePicture,
    stylesProfilePictureContainer = _ref2.stylesProfilePictureContainer;
  return createElement("div", {
    className: 'nav_profile_menu',
    style: {
      position: 'relative',
      display: 'flex',
      alignItems: 'center',
      marginLeft: theme.spaces.mod + 'px'
    }
  }, createElement("div", {
    className: 'nav_profile_toggle ' + classNameProfilePictureContainer,
    onClick: function onClick(event) {
      event.stopPropagation();
      toggleExpandProfile();
    },
    style: _extends({
      display: 'flex',
      alignItems: 'center',
      cursor: 'pointer'
    }, stylesProfilePictureContainer)
  }, profilePicture.length > 0 && createElement("img", {
    className: classNameProfilePicture,
    src: profilePicture,
    style: _extends({
      height: parseInt(theme.dimensions.navHeight) * 5 / 7 + 'px',
      marginRight: theme.spaces.min + 'px',
      borderRadius: parseInt(theme.dimensions.navHeight) * 4 / 10 + 'px'
    }, stylesProfilePicture)
  }), createElement("small", null, createElement("small", null, !expandProfile && '▼', expandProfile && '▲'))), expandProfile && createElement("div", {
    style: {
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'stretch',
      position: 'absolute',
      top: theme.dimensions.navHeight + 'px',
      right: '0px'
    }
  }, createElement("div", {
    className: 'nav_div_profile_menu_overlay',
    style: {
      position: 'fixed',
      left: '0px',
      top: '0px',
      width: '100%',
      height: '100%',
      backgroundColor: 'transparent',
      zIndex: '198'
    },
    onClick: function onClick(event) {
      event.stopPropagation();
      toggleProfileDropdownExpandedWrap(-1);
      toggleExpandProfile();
    }
  }), profilePreamble != null && createElement("div", {
    className: '' + classNameProfilePreamble,
    style: _extends({
      borderTopLeftRadius: '5px',
      borderTopRightRadius: '5px',
      display: 'flex',
      justifyContent: 'center',
      zIndex: '199',
      backgroundColor: '#efefef'
    }, stylesProfilePreamble)
  }, profilePreamble, " "), profileMenu.map(function (element, key) {
    if (Object.prototype.toString.call(element) === '[object Array]') {
      return createElement("div", {
        key: key,
        style: {
          position: 'relative',
          zIndex: '199',
          width: theme.dimensions.menuWidth + 'px'
        }
      }, getProfileDropdownExpandedWrap()[key] && createElement(SfButton, {
        className: 'nav_profile_menu_' + key + '_expanded ' + classNameMenuMobileSelected,
        styles: _extends({
          width: '100%',
          borderTopLeftRadius: profilePreamble != null ? '0px' : key === 0 ? '5px' : '0px',
          borderTopRightRadius: profilePreamble != null ? '0px' : key === 0 ? '5px' : '0px',
          borderBottomLeftRadius: profileComponent != null ? '0px' : key === profileMenu.length - 1 ? '5px' : '0px',
          borderBottomRightRadius: profileComponent != null ? '0px' : key === profileMenu.length - 1 ? '5px' : '0px',
          fontWeight: '400',
          marginTop: '-2px',
          cursor: 'pointer',
          justifyContent: 'flex-start',
          backgroundColor: Util.getTextColor(theme, variant, "filled"),
          boxShadow: profileComponent != null ? 'none' : key === profileMenu.length - 1 ? '0px 2px 2px #aaa' : 'none'
        }, stylesMenuMobileSelected),
        variant: variant,
        type: "outlined",
        caption: (!getProfileDropdownExpandedWrap()[key] ? '◂ ' : '◂ ') + element[0].caption,
        onClick: function onClick(event) {
          event.stopPropagation();
          toggleProfileDropdownExpandedWrap(key);
        }
      }), !getProfileDropdownExpandedWrap()[key] && createElement(SfButton, {
        className: 'nav_profile_menu_' + key + '_collapsed ' + classNameMenuMobile,
        styles: _extends({
          width: '100%',
          borderTopLeftRadius: profilePreamble != null ? '0px' : key === 0 ? '5px' : '0px',
          borderTopRightRadius: profilePreamble != null ? '0px' : key === 0 ? '5px' : '0px',
          borderBottomLeftRadius: profileComponent != null ? '0px' : key === profileMenu.length - 1 ? '5px' : '0px',
          borderBottomRightRadius: profileComponent != null ? '0px' : key === profileMenu.length - 1 ? '5px' : '0px',
          fontWeight: '400',
          marginTop: '-2px',
          cursor: 'pointer',
          justifyContent: 'flex-start',
          boxShadow: profileComponent != null ? 'none' : key === profileMenu.length - 1 ? '0px 2px 2px #aaa' : 'none',
          zIndex: '199'
        }, stylesMenuMobile),
        variant: variant,
        type: "filled",
        caption: element[0].caption + (!getProfileDropdownExpandedWrap()[key] ? ' ▸' : ' ▸'),
        onClick: function onClick(event) {
          event.stopPropagation();
          toggleProfileDropdownExpandedWrap(key);
        }
      }), getProfileDropdownExpandedWrap()[key] && createElement("div", {
        style: {
          flexDirection: 'column',
          position: 'absolute',
          right: '0px',
          marginRight: parseInt(theme.dimensions.menuWidth) + parseInt(theme.spaces.min) + 'px',
          top: '0px',
          display: 'flex',
          alignItems: 'stretch',
          zIndex: '199'
        }
      }, element.slice(1).map(function (item, key1) {
        return createElement(SfButton, {
          className: 'nav_profile_menu_' + key + '_' + key1 + " " + classNameSubMenuMobile,
          styles: _extends({
            borderTopLeftRadius: key1 === 0 ? '5px' : '0px',
            borderTopRightRadius: key1 === 0 ? '5px' : '0px',
            borderBottomLeftRadius: key1 === element.length - 2 ? '5px' : '0px',
            borderBottomRightRadius: key1 === element.length - 2 ? '5px' : '0px',
            fontWeight: '400',
            marginTop: '-2px',
            cursor: 'pointer',
            justifyContent: 'flex-start',
            width: theme.dimensions.menuWidth + 'px',
            boxShadow: key1 === element.length - 1 ? '0px 2px 2px #aaa' : 'none'
          }, stylesSubMenuMobile),
          key: key1,
          variant: variant,
          type: "filled",
          caption: item.caption,
          onClick: function onClick(event) {
            event.stopPropagation();
            toggleProfileDropdownExpandedWrap(-1);
            setExpandProfile(false);
            clickMenu(item.link, item.component);
          }
        });
      })));
    } else {
      return createElement("div", {
        key: key,
        style: {
          zIndex: '199',
          width: theme.dimensions.menuWidth + 'px'
        }
      }, createElement(SfButton, {
        className: 'nav_profile_menu_' + key + ' ' + classNameMenuMobile,
        styles: _extends({
          width: '100%',
          borderTopLeftRadius: profilePreamble != null ? '0px' : key === 0 ? '5px' : '0px',
          borderTopRightRadius: profilePreamble != null ? '0px' : key === 0 ? '5px' : '0px',
          borderBottomLeftRadius: profileComponent != null ? '0px' : key === profileMenu.length - 1 ? '5px' : '0px',
          borderBottomRightRadius: profileComponent != null ? '0px' : key === profileMenu.length - 1 ? '5px' : '0px',
          fontWeight: '400',
          marginTop: '-2px',
          cursor: 'pointer',
          justifyContent: 'flex-start',
          zIndex: '199',
          boxShadow: profileComponent != null ? 'none' : key === profileMenu.length - 1 ? '0px 2px 2px #aaa' : 'none'
        }, stylesMenuMobile),
        key: key,
        variant: variant,
        type: "filled",
        caption: element.caption,
        onClick: function onClick(event) {
          event.stopPropagation();
          toggleProfileDropdownExpandedWrap(-1);
          setExpandProfile(false);
          clickMenu(element.link, element.component);
        }
      }));
    }
  }), profileComponent != null && createElement("div", {
    className: '' + classNameProfileComponent,
    style: _extends({
      boxShadow: '0px 2px 2px #aaa',
      borderBottomLeftRadius: '5px',
      borderBottomRightRadius: '5px',
      display: 'flex',
      justifyContent: 'center',
      zIndex: '199',
      backgroundColor: '#efefef'
    }, stylesProfileComponent)
  }, profileComponent, " ")));
};
var NotificationMenu = function NotificationMenu(_ref3) {
  var _ref3$variant = _ref3.variant,
    variant = _ref3$variant === void 0 ? Themes.getTheme().variants.primary : _ref3$variant,
    _ref3$theme = _ref3.theme,
    theme = _ref3$theme === void 0 ? Themes.getTheme() : _ref3$theme,
    notificationList = _ref3.notificationList,
    toggleNotificationMenu = _ref3.toggleNotificationMenu,
    onViewAllNotificationsClicked = _ref3.onViewAllNotificationsClicked,
    onNotificationClicked = _ref3.onNotificationClicked,
    classNameNotificationListContainer = _ref3.classNameNotificationListContainer,
    classNameNotificationRead = _ref3.classNameNotificationRead,
    classNameNotificationUnRead = _ref3.classNameNotificationUnRead,
    stylesNotificationListContainer = _ref3.stylesNotificationListContainer,
    stylesNotificationRead = _ref3.stylesNotificationRead,
    stylesNotificationUnRead = _ref3.stylesNotificationUnRead,
    stylesNotificationViewAll = _ref3.stylesNotificationViewAll,
    classNameNotificationViewAll = _ref3.classNameNotificationViewAll;
  return createElement("div", {
    className: 'nav_div_notif_menu ',
    style: {
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'stretch',
      position: 'absolute',
      right: theme.spaces.ltl + 'px',
      top: parseInt(theme.dimensions.navHeight) + 'px'
    }
  }, createElement("div", {
    className: 'nav_div_notif_menu_overlay',
    style: {
      position: 'fixed',
      left: '0px',
      top: '0px',
      width: '100%',
      height: '100%',
      backgroundColor: 'transparent',
      zIndex: '198'
    },
    onClick: function onClick() {
      toggleNotificationMenu();
    }
  }), createElement("div", {
    style: {
      zIndex: '199',
      position: 'relative'
    }
  }, createElement("div", {
    className: classNameNotificationListContainer,
    style: _extends({
      flexDirection: 'column',
      display: 'flex',
      alignItems: 'stretch',
      backgroundColor: 'white',
      maxHeight: '400px',
      overflowY: 'auto',
      position: 'relative'
    }, stylesNotificationListContainer)
  }, notificationList.map(function (item, key1) {
    var styleNotification = item.read ? stylesNotificationRead : stylesNotificationUnRead;
    return createElement("div", {
      onClick: function onClick() {
        onNotificationClicked(item);
        toggleNotificationMenu();
      },
      className: 'nav_notif_list_' + key1 + " " + (item.read ? classNameNotificationRead : classNameNotificationUnRead),
      key: key1,
      style: _extends({
        borderTopLeftRadius: key1 === 0 ? '5px' : '0px',
        borderTopRightRadius: key1 === 0 ? '5px' : '0px',
        borderBottomLeftRadius: key1 === notificationList.length - 1 ? '5px' : '0px',
        borderBottomRightRadius: key1 === notificationList.length - 1 ? '5px' : '0px',
        fontWeight: '400',
        marginBottom: theme.spaces.min + 'px',
        cursor: 'pointer',
        justifyContent: 'flex-start',
        width: theme.dimensions.notificationListWidth + 'px',
        boxShadow: '0px 2px 2px #aaa',
        backgroundColor: Util.getBackgroundColor(theme, item.read ? "secondary" : variant, theme.types.filled),
        color: Util.getTextColor(theme, variant, theme.types.filled),
        paddingTop: theme.spaces.ltl + 'px',
        paddingBottom: theme.spaces.ltl + 'px',
        paddingLeft: theme.spaces.ltl + 'px',
        paddingRight: theme.spaces.ltl + 'px'
      }, styleNotification)
    }, createElement("div", {
      style: {
        fontSize: '90%',
        fontWeight: '400'
      }
    }, item.title), createElement("div", {
      style: {
        fontSize: '70%',
        fontWeight: '400',
        marginTop: '4px'
      }
    }, item.description), createElement("div", {
      style: {
        fontSize: '50%',
        fontWeight: '400',
        marginTop: '8px',
        textAlign: 'right'
      }
    }, item.timestampReceived));
  })), createElement("div", {
    className: 'div_viewall_notif ' + classNameNotificationViewAll,
    style: _extends({
      textAlign: 'right',
      fontSize: '70%',
      fontWeight: '800',
      cursor: 'pointer'
    }, stylesNotificationViewAll),
    onClick: function onClick(e) {
      toggleNotificationMenu();
      onViewAllNotificationsClicked();
      e.stopPropagation();
    }
  }, "View All \u25B6")));
};
var ErrorNotFound = function ErrorNotFound() {
  return createElement("div", {
    style: {
      textAlign: 'center',
      color: 'gray'
    }
  }, createElement("br", null), createElement("br", null), createElement("b", null, createElement("h1", null, "Page Not Found")), createElement("b", null, "There is nothing here..."), createElement("br", null), createElement("br", null), createElement("br", null));
};
var SfNav = function SfNav(_ref4) {
  var _ref4$variant = _ref4.variant,
    variant = _ref4$variant === void 0 ? Themes.getTheme().variants.primary : _ref4$variant,
    _ref4$theme = _ref4.theme,
    theme = _ref4$theme === void 0 ? Themes.getTheme() : _ref4$theme,
    _ref4$brand = _ref4.brand,
    brand = _ref4$brand === void 0 ? Constants.DEFAULT_BRAND_NAME : _ref4$brand,
    _ref4$stylesBrand = _ref4.stylesBrand,
    stylesBrand = _ref4$stylesBrand === void 0 ? {} : _ref4$stylesBrand,
    _ref4$brandLogo = _ref4.brandLogo,
    brandLogo = _ref4$brandLogo === void 0 ? Constants.DEFAULT_BRAND_ICON : _ref4$brandLogo,
    _ref4$stylesBrandLogo = _ref4.stylesBrandLogo,
    stylesBrandLogo = _ref4$stylesBrandLogo === void 0 ? {} : _ref4$stylesBrandLogo,
    _ref4$menu = _ref4.menu,
    menu = _ref4$menu === void 0 ? Constants.DEFAULT_MENU : _ref4$menu,
    _ref4$profilePicture = _ref4.profilePicture,
    profilePicture = _ref4$profilePicture === void 0 ? Constants.DEFAULT_PROFILE_PICTURE : _ref4$profilePicture,
    _ref4$profileMenu = _ref4.profileMenu,
    profileMenu = _ref4$profileMenu === void 0 ? [] : _ref4$profileMenu,
    _ref4$notificationDet = _ref4.notificationDetailsMenu,
    notificationDetailsMenu = _ref4$notificationDet === void 0 ? {
      args: [],
      link: "",
      component: null
    } : _ref4$notificationDet,
    _ref4$notificationLis = _ref4.notificationListMenu,
    notificationListMenu = _ref4$notificationLis === void 0 ? {
      args: [],
      link: "",
      component: null
    } : _ref4$notificationLis,
    _ref4$profilePreamble = _ref4.profilePreamble,
    profilePreamble = _ref4$profilePreamble === void 0 ? null : _ref4$profilePreamble,
    _ref4$otherMenu = _ref4.otherMenu,
    otherMenu = _ref4$otherMenu === void 0 ? [] : _ref4$otherMenu,
    _ref4$homeMenu = _ref4.homeMenu,
    homeMenu = _ref4$homeMenu === void 0 ? {
      args: [],
      link: "",
      component: null
    } : _ref4$homeMenu,
    _ref4$profileComponen = _ref4.profileComponent,
    profileComponent = _ref4$profileComponen === void 0 ? null : _ref4$profileComponen,
    _ref4$bannerComponent = _ref4.bannerComponent,
    bannerComponent = _ref4$bannerComponent === void 0 ? null : _ref4$bannerComponent,
    _ref4$bannerComponent2 = _ref4.bannerComponentMobile,
    bannerComponentMobile = _ref4$bannerComponent2 === void 0 ? null : _ref4$bannerComponent2,
    _ref4$enableRouting = _ref4.enableRouting,
    enableRouting = _ref4$enableRouting === void 0 ? false : _ref4$enableRouting,
    _ref4$showProfile = _ref4.showProfile,
    showProfile = _ref4$showProfile === void 0 ? false : _ref4$showProfile,
    _ref4$showSearch = _ref4.showSearch,
    showSearch = _ref4$showSearch === void 0 ? true : _ref4$showSearch,
    _ref4$showSignIn = _ref4.showSignIn,
    showSignIn = _ref4$showSignIn === void 0 ? true : _ref4$showSignIn,
    _ref4$showBack = _ref4.showBack,
    showBack = _ref4$showBack === void 0 ? false : _ref4$showBack,
    _ref4$showNotificatio = _ref4.showNotification,
    showNotification = _ref4$showNotificatio === void 0 ? false : _ref4$showNotificatio,
    _ref4$showBanner = _ref4.showBanner,
    showBanner = _ref4$showBanner === void 0 ? false : _ref4$showBanner,
    _ref4$onMenuClicked = _ref4.onMenuClicked,
    onMenuClicked = _ref4$onMenuClicked === void 0 ? function () {} : _ref4$onMenuClicked,
    _ref4$onHomePressed = _ref4.onHomePressed,
    onHomePressed = _ref4$onHomePressed === void 0 ? function () {} : _ref4$onHomePressed,
    _ref4$onSearchPressed = _ref4.onSearchPressed,
    onSearchPressed = _ref4$onSearchPressed === void 0 ? function () {} : _ref4$onSearchPressed,
    _ref4$onSignInPressed = _ref4.onSignInPressed,
    onSignInPressed = _ref4$onSignInPressed === void 0 ? function () {} : _ref4$onSignInPressed,
    _ref4$onBackPressed = _ref4.onBackPressed,
    onBackPressed = _ref4$onBackPressed === void 0 ? function () {} : _ref4$onBackPressed,
    _ref4$onViewAllNotifi = _ref4.onViewAllNotificationsClicked,
    onViewAllNotificationsClicked = _ref4$onViewAllNotifi === void 0 ? function () {} : _ref4$onViewAllNotifi,
    _ref4$onNotificationC = _ref4.onNotificationClicked,
    onNotificationClicked = _ref4$onNotificationC === void 0 ? function () {} : _ref4$onNotificationC,
    _ref4$onBannerCtaPres = _ref4.onBannerCtaPressed,
    onBannerCtaPressed = _ref4$onBannerCtaPres === void 0 ? function () {} : _ref4$onBannerCtaPres,
    _ref4$signInCaption = _ref4.signInCaption,
    signInCaption = _ref4$signInCaption === void 0 ? "Sign In" : _ref4$signInCaption,
    _ref4$searchCaption = _ref4.searchCaption,
    searchCaption = _ref4$searchCaption === void 0 ? "Search" : _ref4$searchCaption,
    _ref4$bannerText = _ref4.bannerText,
    bannerText = _ref4$bannerText === void 0 ? Constants.DEFAULT_BANNER_TEXT : _ref4$bannerText,
    _ref4$bannerTextMobil = _ref4.bannerTextMobile,
    bannerTextMobile = _ref4$bannerTextMobil === void 0 ? "" : _ref4$bannerTextMobil,
    _ref4$bannerCta = _ref4.bannerCta,
    bannerCta = _ref4$bannerCta === void 0 ? Constants.DEFAULT_BANNER_CTA : _ref4$bannerCta,
    _ref4$bannerCtaMobile = _ref4.bannerCtaMobile,
    bannerCtaMobile = _ref4$bannerCtaMobile === void 0 ? "" : _ref4$bannerCtaMobile,
    _ref4$bannerEnableDis = _ref4.bannerEnableDismiss,
    bannerEnableDismiss = _ref4$bannerEnableDis === void 0 ? true : _ref4$bannerEnableDis,
    _ref4$searchIcon = _ref4.searchIcon,
    searchIcon = _ref4$searchIcon === void 0 ? null : _ref4$searchIcon,
    _ref4$menuIcon = _ref4.menuIcon,
    menuIcon = _ref4$menuIcon === void 0 ? null : _ref4$menuIcon,
    _ref4$backIcon = _ref4.backIcon,
    backIcon = _ref4$backIcon === void 0 ? null : _ref4$backIcon,
    _ref4$notificationIco = _ref4.notificationIcon,
    notificationIcon = _ref4$notificationIco === void 0 ? null : _ref4$notificationIco,
    _ref4$optionsIcon = _ref4.optionsIcon,
    optionsIcon = _ref4$optionsIcon === void 0 ? null : _ref4$optionsIcon,
    _ref4$notificationLis2 = _ref4.notificationList,
    notificationList = _ref4$notificationLis2 === void 0 ? Constants.DEFAULT_NOTIFICATION_LIST : _ref4$notificationLis2,
    _ref4$rootUrl = _ref4.rootUrl,
    rootUrl = _ref4$rootUrl === void 0 ? "" : _ref4$rootUrl,
    _ref4$classNameBrand = _ref4.classNameBrand,
    classNameBrand = _ref4$classNameBrand === void 0 ? "" : _ref4$classNameBrand,
    _ref4$classNameBrandL = _ref4.classNameBrandLogo,
    classNameBrandLogo = _ref4$classNameBrandL === void 0 ? "" : _ref4$classNameBrandL,
    _ref4$classNameMenu = _ref4.classNameMenu,
    classNameMenu = _ref4$classNameMenu === void 0 ? "" : _ref4$classNameMenu,
    _ref4$classNameSubMen = _ref4.classNameSubMenu,
    classNameSubMenu = _ref4$classNameSubMen === void 0 ? "" : _ref4$classNameSubMen,
    _ref4$classNameMenuMo = _ref4.classNameMenuMobile,
    classNameMenuMobile = _ref4$classNameMenuMo === void 0 ? "" : _ref4$classNameMenuMo,
    _ref4$classNameSubMen2 = _ref4.classNameSubMenuMobile,
    classNameSubMenuMobile = _ref4$classNameSubMen2 === void 0 ? "" : _ref4$classNameSubMen2,
    _ref4$classNameMenuMo2 = _ref4.classNameMenuMobileSelected,
    classNameMenuMobileSelected = _ref4$classNameMenuMo2 === void 0 ? "" : _ref4$classNameMenuMo2,
    _ref4$classNameSignIn = _ref4.classNameSignIn,
    classNameSignIn = _ref4$classNameSignIn === void 0 ? "" : _ref4$classNameSignIn,
    _ref4$classNameSearch = _ref4.classNameSearchContainer,
    classNameSearchContainer = _ref4$classNameSearch === void 0 ? "" : _ref4$classNameSearch,
    _ref4$classNameSearch2 = _ref4.classNameSearchInput,
    classNameSearchInput = _ref4$classNameSearch2 === void 0 ? "" : _ref4$classNameSearch2,
    _ref4$classNameContai = _ref4.classNameContainerDesktop,
    classNameContainerDesktop = _ref4$classNameContai === void 0 ? "" : _ref4$classNameContai,
    _ref4$classNameContai2 = _ref4.classNameContainerMobile,
    classNameContainerMobile = _ref4$classNameContai2 === void 0 ? "" : _ref4$classNameContai2,
    _ref4$classNameContai3 = _ref4.classNameContainerRightMenu,
    classNameContainerRightMenu = _ref4$classNameContai3 === void 0 ? "" : _ref4$classNameContai3,
    _ref4$classNameProfil = _ref4.classNameProfilePreamble,
    classNameProfilePreamble = _ref4$classNameProfil === void 0 ? "" : _ref4$classNameProfil,
    _ref4$classNameProfil2 = _ref4.classNameProfileComponent,
    classNameProfileComponent = _ref4$classNameProfil2 === void 0 ? "" : _ref4$classNameProfil2,
    _ref4$classNameProfil3 = _ref4.classNameProfilePicture,
    classNameProfilePicture = _ref4$classNameProfil3 === void 0 ? "" : _ref4$classNameProfil3,
    _ref4$classNameProfil4 = _ref4.classNameProfilePictureContainer,
    classNameProfilePictureContainer = _ref4$classNameProfil4 === void 0 ? "" : _ref4$classNameProfil4,
    _ref4$classNameBack = _ref4.classNameBack,
    classNameBack = _ref4$classNameBack === void 0 ? "" : _ref4$classNameBack,
    _ref4$classNameNotifi = _ref4.classNameNotificationIcon,
    classNameNotificationIcon = _ref4$classNameNotifi === void 0 ? "" : _ref4$classNameNotifi,
    _ref4$classNameNotifi2 = _ref4.classNameNotificationBadge,
    classNameNotificationBadge = _ref4$classNameNotifi2 === void 0 ? "" : _ref4$classNameNotifi2,
    _ref4$classNameNotifi3 = _ref4.classNameNotificationListContainer,
    classNameNotificationListContainer = _ref4$classNameNotifi3 === void 0 ? "" : _ref4$classNameNotifi3,
    _ref4$classNameNotifi4 = _ref4.classNameNotificationRead,
    classNameNotificationRead = _ref4$classNameNotifi4 === void 0 ? "" : _ref4$classNameNotifi4,
    _ref4$classNameNotifi5 = _ref4.classNameNotificationUnRead,
    classNameNotificationUnRead = _ref4$classNameNotifi5 === void 0 ? "" : _ref4$classNameNotifi5,
    _ref4$classNameNotifi6 = _ref4.classNameNotificationViewAll,
    classNameNotificationViewAll = _ref4$classNameNotifi6 === void 0 ? "" : _ref4$classNameNotifi6,
    _ref4$classNameBanner = _ref4.classNameBannerContainer,
    classNameBannerContainer = _ref4$classNameBanner === void 0 ? "" : _ref4$classNameBanner,
    _ref4$classNameBanner2 = _ref4.classNameBannerText,
    classNameBannerText = _ref4$classNameBanner2 === void 0 ? "" : _ref4$classNameBanner2,
    _ref4$classNameBanner3 = _ref4.classNameBannerCta,
    classNameBannerCta = _ref4$classNameBanner3 === void 0 ? "" : _ref4$classNameBanner3,
    _ref4$stylesMenu = _ref4.stylesMenu,
    stylesMenu = _ref4$stylesMenu === void 0 ? {} : _ref4$stylesMenu,
    _ref4$stylesSubMenu = _ref4.stylesSubMenu,
    stylesSubMenu = _ref4$stylesSubMenu === void 0 ? {} : _ref4$stylesSubMenu,
    _ref4$stylesMenuMobil = _ref4.stylesMenuMobile,
    stylesMenuMobile = _ref4$stylesMenuMobil === void 0 ? {} : _ref4$stylesMenuMobil,
    _ref4$stylesSubMenuMo = _ref4.stylesSubMenuMobile,
    stylesSubMenuMobile = _ref4$stylesSubMenuMo === void 0 ? {} : _ref4$stylesSubMenuMo,
    _ref4$stylesMenuMobil2 = _ref4.stylesMenuMobileSelected,
    stylesMenuMobileSelected = _ref4$stylesMenuMobil2 === void 0 ? "" : _ref4$stylesMenuMobil2,
    _ref4$stylesSignIn = _ref4.stylesSignIn,
    stylesSignIn = _ref4$stylesSignIn === void 0 ? {} : _ref4$stylesSignIn,
    _ref4$stylesSearchCon = _ref4.stylesSearchContainer,
    stylesSearchContainer = _ref4$stylesSearchCon === void 0 ? {} : _ref4$stylesSearchCon,
    _ref4$stylesSearchInp = _ref4.stylesSearchInput,
    stylesSearchInput = _ref4$stylesSearchInp === void 0 ? {} : _ref4$stylesSearchInp,
    _ref4$stylesContainer = _ref4.stylesContainerDesktop,
    stylesContainerDesktop = _ref4$stylesContainer === void 0 ? {} : _ref4$stylesContainer,
    _ref4$stylesContainer2 = _ref4.stylesContainerMobile,
    stylesContainerMobile = _ref4$stylesContainer2 === void 0 ? {} : _ref4$stylesContainer2,
    _ref4$stylesContainer3 = _ref4.stylesContainerRightMenu,
    stylesContainerRightMenu = _ref4$stylesContainer3 === void 0 ? {} : _ref4$stylesContainer3,
    _ref4$stylesProfilePr = _ref4.stylesProfilePreamble,
    stylesProfilePreamble = _ref4$stylesProfilePr === void 0 ? {} : _ref4$stylesProfilePr,
    _ref4$stylesProfileCo = _ref4.stylesProfileComponent,
    stylesProfileComponent = _ref4$stylesProfileCo === void 0 ? {} : _ref4$stylesProfileCo,
    _ref4$stylesProfilePi = _ref4.stylesProfilePicture,
    stylesProfilePicture = _ref4$stylesProfilePi === void 0 ? {} : _ref4$stylesProfilePi,
    _ref4$stylesProfilePi2 = _ref4.stylesProfilePictureContainer,
    stylesProfilePictureContainer = _ref4$stylesProfilePi2 === void 0 ? {} : _ref4$stylesProfilePi2,
    _ref4$stylesBack = _ref4.stylesBack,
    stylesBack = _ref4$stylesBack === void 0 ? {} : _ref4$stylesBack,
    _ref4$stylesNotificat = _ref4.stylesNotificationIcon,
    stylesNotificationIcon = _ref4$stylesNotificat === void 0 ? {} : _ref4$stylesNotificat,
    _ref4$stylesNotificat2 = _ref4.stylesNotificationBadge,
    stylesNotificationBadge = _ref4$stylesNotificat2 === void 0 ? {} : _ref4$stylesNotificat2,
    _ref4$stylesNotificat3 = _ref4.stylesNotificationListContainer,
    stylesNotificationListContainer = _ref4$stylesNotificat3 === void 0 ? {} : _ref4$stylesNotificat3,
    _ref4$stylesNotificat4 = _ref4.stylesNotificationRead,
    stylesNotificationRead = _ref4$stylesNotificat4 === void 0 ? {} : _ref4$stylesNotificat4,
    _ref4$stylesNotificat5 = _ref4.stylesNotificationUnRead,
    stylesNotificationUnRead = _ref4$stylesNotificat5 === void 0 ? {} : _ref4$stylesNotificat5,
    _ref4$stylesNotificat6 = _ref4.stylesNotificationViewAll,
    stylesNotificationViewAll = _ref4$stylesNotificat6 === void 0 ? {} : _ref4$stylesNotificat6,
    _ref4$stylesBannerCon = _ref4.stylesBannerContainer,
    stylesBannerContainer = _ref4$stylesBannerCon === void 0 ? {} : _ref4$stylesBannerCon,
    _ref4$stylesBannerCta = _ref4.stylesBannerCta,
    stylesBannerCta = _ref4$stylesBannerCta === void 0 ? {} : _ref4$stylesBannerCta,
    _ref4$stylesBannerTex = _ref4.stylesBannerText,
    stylesBannerText = _ref4$stylesBannerTex === void 0 ? {} : _ref4$stylesBannerTex;
  var _useState2 = useState(getWindowDimensions()),
    windowDimensions = _useState2[0],
    setWindowDimensions = _useState2[1];
  var _useState3 = useState(''),
    searchString = _useState3[0],
    setSearchString = _useState3[1];
  var _useState4 = useState('[]'),
    dropdownExpanded = _useState4[0],
    setDropdownExpanded = _useState4[1];
  var _useState5 = useState('[]'),
    profileDropdownExpanded = _useState5[0],
    setProfileDropdownExpanded = _useState5[1];
  var _useState6 = useState(false),
    showLeftMenu = _useState6[0],
    setShowLeftMenu = _useState6[1];
  var _useState7 = useState(false),
    showRightMenu = _useState7[0],
    setShowRightMenu = _useState7[1];
  var _useState8 = useState(false),
    showNotificationMenu = _useState8[0],
    setShowNotificationMenu = _useState8[1];
  var _useState9 = useState(false),
    expandProfile = _useState9[0],
    setExpandProfile = _useState9[1];
  var _useState10 = useState("[]"),
    notificationListStr = _useState10[0],
    setNotificationListStr = _useState10[1];
  var _useState11 = useState([]),
    history = _useState11[0],
    setHistory = _useState11[1];
  var interfaceSfNavProvider = {
    navigateTo: navigateTo,
    navigationData: history[history.length - 1]
  };
  function setNotificationListStrWrap(list) {
    setNotificationListStr(JSON.stringify(list));
  }
  function getNotificationListStrWrap() {
    return JSON.parse(notificationListStr);
  }
  function notificationListContainsUnRead() {
    if (JSON.parse(notificationListStr).length === 0) {
      return false;
    } else {
      var unRead = false;
      for (var i = 0; i < getNotificationListStrWrap().length; i++) {
        if (!getNotificationListStrWrap()[i].read) {
          return true;
        }
      }
      return unRead;
    }
  }
  function toggleExpandProfile() {
    setExpandProfile(!expandProfile);
  }
  function toggleLeftMenu() {
    setShowLeftMenu(!showLeftMenu);
  }
  function toggleRightMenu() {
    setShowRightMenu(!showRightMenu);
  }
  function toggleNotificationMenu() {
    setShowNotificationMenu(!showNotificationMenu);
  }
  function clickMenu(link, component, args) {
    if (component === void 0) {
      component = null;
    }
    if (args === void 0) {
      args = null;
    }
    if (enableRouting) {
      if (component != null) {
        var interfaceNavigate = {
          link: link,
          component: component,
          args: args
        };
        navigateTo(interfaceNavigate);
      } else {
        onMenuClicked(link);
      }
    } else {
      onMenuClicked(link);
    }
  }
  function navigateTo(component) {
    var prefix = location.protocol + '//' + location.host + '/';
    if (rootUrl != "") {
      prefix = rootUrl.endsWith("/") ? rootUrl : rootUrl + "/";
    }
    window.history.pushState({}, "", component.link == "" ? "" : prefix + component.link + (component.args == null ? "" : component.args.length === 0 ? "" : "/" + component.args.join("/")));
    setHistory(function (history) {
      return [].concat(history, [component]);
    });
  }
  function toggleDropdownExpandedWrap(index) {
    var arr = getDropdownExpandedWrap();
    if (index === -1) {
      for (var i = 0; i < arr.length; i++) {
        arr[i] = false;
      }
      setDropdownExpanded(JSON.stringify(arr));
    } else {
      if (arr[index]) {
        arr[index] = !arr[index];
      } else {
        for (var _i = 0; _i < arr.length; _i++) {
          arr[_i] = false;
        }
        arr[index] = true;
      }
      setDropdownExpanded(JSON.stringify(arr));
    }
  }
  function getDropdownExpandedWrap() {
    return JSON.parse(dropdownExpanded);
  }
  function toggleProfileDropdownExpandedWrap(index) {
    var arr = getProfileDropdownExpandedWrap();
    if (index === -1) {
      for (var i = 0; i < arr.length; i++) {
        arr[i] = false;
      }
      setProfileDropdownExpanded(JSON.stringify(arr));
    } else {
      if (arr[index]) {
        arr[index] = !arr[index];
      } else {
        for (var _i2 = 0; _i2 < arr.length; _i2++) {
          arr[_i2] = false;
        }
        arr[index] = true;
      }
      setProfileDropdownExpanded(JSON.stringify(arr));
    }
  }
  function getProfileDropdownExpandedWrap() {
    return JSON.parse(profileDropdownExpanded);
  }
  function onClickNotification(item) {
    if (enableRouting) {
      if (notificationDetailsMenu.component == null) {
        onNotificationClicked(item.id);
      } else {
        var interfaceNavigate = {
          link: notificationDetailsMenu.link,
          component: notificationDetailsMenu.component,
          args: [item.id > 0 ? item.id : ""]
        };
        navigateTo(interfaceNavigate);
      }
    } else {
      onNotificationClicked(item.id);
    }
  }
  function onClickNotificationViewAll() {
    if (enableRouting) {
      if (notificationListMenu.component == null) {
        onViewAllNotificationsClicked();
      } else {
        var interfaceNavigate = {
          link: notificationListMenu.link,
          component: notificationListMenu.component,
          args: null
        };
        navigateTo(interfaceNavigate);
      }
    } else {
      onViewAllNotificationsClicked();
    }
  }
  function processHistory() {
    if (enableRouting) {
      var i;
      var j;
      var i;
      var j;
      var i;
      var _ret = function () {
        var urlComponents = window.location.href.split("/");
        var screenComponent = urlComponents[3];
        var args = urlComponents.slice(4);
        if (homeMenu.link == screenComponent && homeMenu.component != null) {
          setHistory(function (history) {
            return [].concat(history, [{
              link: homeMenu.link,
              component: homeMenu.component,
              args: null
            }]);
          });
          return {
            v: void 0
          };
        }
        if (notificationDetailsMenu.link == screenComponent && notificationDetailsMenu.component != null) {
          setHistory(function (history) {
            return [].concat(history, [{
              link: notificationDetailsMenu.link,
              component: notificationDetailsMenu.component,
              args: args
            }]);
          });
          return {
            v: void 0
          };
        }
        if (notificationListMenu.link == screenComponent && notificationListMenu.component != null) {
          setHistory(function (history) {
            return [].concat(history, [{
              link: notificationListMenu.link,
              component: notificationListMenu.component,
              args: null
            }]);
          });
          return {
            v: void 0
          };
        }
        for (i = 0; i < menu.length; i++) {
          if (menu[i].constructor.name == "Array") {
            for (j = 1; j < menu[i].length; j++) {
              if (menu[i][j].link == screenComponent && menu[i][j].component != null) {
                setHistory(function (history) {
                  return [].concat(history, [{
                    link: menu[i][j].link,
                    component: menu[i][j].component,
                    args: null
                  }]);
                });
                return {
                  v: void 0
                };
              }
            }
          } else {
            if (menu[i].link == screenComponent && menu[i].component != null) {
              setHistory(function (history) {
                return [].concat(history, [{
                  link: menu[i].link,
                  component: menu[i].component,
                  args: null
                }]);
              });
              return {
                v: void 0
              };
            }
          }
        }
        if (showProfile) {
          for (i = 0; i < profileMenu.length; i++) {
            if (profileMenu[i].constructor.name == "Array") {
              for (j = 1; j < profileMenu[i].length; j++) {
                if (profileMenu[i][j].link == screenComponent && profileMenu[i][j].component != null) {
                  setHistory(function (history) {
                    return [].concat(history, [{
                      link: profileMenu[i][j].link,
                      component: profileMenu[i][j].component,
                      args: null
                    }]);
                  });
                  return {
                    v: void 0
                  };
                }
              }
            } else {
              if (profileMenu[i].link == screenComponent && profileMenu[i].component != null) {
                setHistory(function (history) {
                  return [].concat(history, [{
                    link: profileMenu[i].link,
                    component: profileMenu[i].component,
                    args: null
                  }]);
                });
                return {
                  v: void 0
                };
              }
            }
          }
        }
        for (i = 0; i < otherMenu.length; i++) {
          if (otherMenu[i].link == screenComponent && otherMenu[i].component != null) {
            setHistory(function (history) {
              return [].concat(history, [{
                link: otherMenu[i].link,
                component: otherMenu[i].component,
                args: args
              }]);
            });
            return {
              v: void 0
            };
          }
        }
        if (screenComponent == "" && homeMenu.component != null) {
          setHistory(function (history) {
            return [].concat(history, [{
              link: homeMenu.link,
              component: homeMenu.component,
              args: null
            }]);
          });
          return {
            v: void 0
          };
        }
        setHistory(function (history) {
          return [].concat(history, [{
            link: "errornotfound",
            component: createElement(ErrorNotFound, null),
            args: null
          }]);
        });
      }();
      if (typeof _ret === "object") return _ret.v;
    }
  }
  useEffect(function () {
    setNotificationListStrWrap(notificationList);
  }, [notificationList]);
  useEffect(function () {
    function handleResize() {
      setWindowDimensions(getWindowDimensions());
    }
    window.addEventListener('resize', handleResize);
    return function () {
      return window.removeEventListener('resize', handleResize);
    };
  }, []);
  useEffect(function () {
    function handlePopState(event) {
      console.log("location: " + document.location + ", state: " + JSON.stringify(event.state));
      processHistory();
    }
    window.addEventListener('popstate', handlePopState);
    return function () {
      return window.removeEventListener('popstate', handlePopState);
    };
  }, []);
  useEffect(function () {
    processHistory();
  }, []);
  return createElement("div", null, createElement("div", {
    style: {
      color: Util.getTextColor(theme, variant == theme.variants.dark ? theme.variants.light : variant == theme.variants.light ? theme.variants.dark : variant, theme.types.outlined)
    }
  }, windowDimensions.width <= theme.breakpoints.tablet && createElement("div", {
    style: {
      position: 'relative'
    }
  }, createElement(Banner, {
    variant: variant,
    theme: theme,
    bannerComponent: bannerComponentMobile == null ? bannerComponent : bannerComponentMobile,
    bannerCta: bannerCtaMobile == "" ? bannerCta : bannerCtaMobile,
    bannerEnableDismiss: bannerEnableDismiss,
    bannerText: bannerTextMobile == "" ? bannerText : bannerTextMobile,
    onBannerCtaPressed: onBannerCtaPressed,
    showBanner: showBanner,
    stylesBannerContainer: stylesBannerContainer,
    stylesBannerCta: stylesBannerCta,
    stylesBannerText: stylesBannerText,
    classNameBannerContainer: classNameBannerContainer,
    classNameBannerCta: classNameBannerCta,
    classNameBannerText: classNameBannerText
  }), createElement("div", {
    className: classNameContainerMobile,
    style: _extends({
      position: 'relative',
      height: theme.dimensions.navHeight + 'px',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'space-between',
      paddingLeft: theme.spaces.big + 'px',
      paddingRight: theme.spaces.big + 'px'
    }, stylesContainerMobile)
  }, createElement("div", {
    style: {
      display: 'flex',
      alignItems: 'center'
    }
  }, showBack && createElement("div", {
    className: 'nav_back_menu ' + classNameBack,
    onClick: function onClick() {
      onBackPressed();
    },
    style: _extends({
      paddingRight: theme.spaces.ltl + 'px',
      fontWeight: '800'
    }, stylesBack)
  }, createElement("b", null, backIcon == null ? '‹' : backIcon)), !showBack && createElement("div", {
    className: 'nav_left_menu',
    onClick: function onClick() {
      toggleLeftMenu();
    },
    style: {
      paddingRight: theme.spaces.ltl + 'px',
      fontWeight: '800'
    }
  }, createElement("b", null, menuIcon == null ? '☰' : menuIcon)), createElement("div", {
    style: {
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      fontWeight: '800'
    }
  }, brandLogo != null && brandLogo != "" && createElement("img", {
    className: "nav_brand_logo " + classNameBrandLogo,
    src: brandLogo,
    onClick: function onClick() {
      if (enableRouting) {
        if (homeMenu.component == null) {
          onHomePressed();
        } else {
          var interfaceNavigate = {
            link: homeMenu.link,
            component: homeMenu.component,
            args: null
          };
          navigateTo(interfaceNavigate);
        }
      } else {
        onHomePressed();
      }
    },
    style: _extends({
      cursor: 'pointer',
      height: parseInt(theme.dimensions.navHeight) * 8 / 10 + 'px',
      paddingRight: theme.spaces.ltl + 'px'
    }, stylesBrandLogo)
  }), brand != "" && createElement("div", {
    onClick: function onClick() {
      if (enableRouting) {
        if (homeMenu.component == null) {
          onHomePressed();
        } else {
          var interfaceNavigate = {
            link: homeMenu.link,
            component: homeMenu.component,
            args: null
          };
          navigateTo(interfaceNavigate);
        }
      } else {
        onHomePressed();
      }
    },
    className: 'nav_brand ' + classNameBrand,
    style: _extends({
      cursor: 'pointer',
      fontSize: '120%'
    }, stylesBrand)
  }, brand))), createElement("div", {
    className: 'nav_right_menu',
    onClick: function onClick() {
      toggleRightMenu();
    },
    style: {
      display: 'flex',
      alignItems: 'center',
      paddingLeft: theme.spaces.ltl + 'px'
    }
  }, showSignIn && createElement(SfButton, {
    className: 'btn_signin_portrait ' + classNameSignIn,
    styles: _extends({
      marginRight: theme.spaces.ltl + 'px',
      height: '30px',
      fontSize: '90%'
    }, stylesSignIn),
    variant: variant == theme.variants.dark ? theme.variants.light : variant == theme.variants.light ? theme.variants.dark : variant,
    type: theme.types.filled,
    caption: signInCaption,
    onClick: function onClick(event) {
      onSignInPressed();
      event.stopPropagation();
    }
  }), showNotification && createElement("div", {
    className: 'btn_notif_icon ' + classNameNotificationIcon,
    style: _extends({
      display: 'flex',
      marginRight: theme.spaces.ltl + 'px',
      alignItems: 'center'
    }, stylesNotificationIcon),
    onClick: function onClick(e) {
      toggleNotificationMenu();
      e.stopPropagation();
    }
  }, createElement("div", null, notificationIcon != null ? notificationIcon : "🔔"), notificationListContainsUnRead() && createElement("div", {
    className: classNameNotificationBadge,
    style: _extends({
      fontSize: '70%',
      width: '10px',
      height: '10px',
      backgroundColor: 'red',
      color: 'red',
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center',
      borderRadius: '8px',
      marginBottom: '15px',
      marginLeft: '-8px',
      fontWeight: '800'
    }, stylesNotificationBadge)
  }, createElement("div", null, "0"))), showSearch && createElement("span", {
    style: {
      fontWeight: '800'
    }
  }, createElement("b", null, optionsIcon == null ? '⋮' : optionsIcon)), showProfile && createElement(Profile, {
    clickMenu: clickMenu,
    toggleExpandProfile: toggleExpandProfile,
    toggleProfileDropdownExpandedWrap: toggleProfileDropdownExpandedWrap,
    setExpandProfile: setExpandProfile,
    getProfileDropdownExpandedWrap: getProfileDropdownExpandedWrap,
    theme: theme,
    variant: variant,
    profilePicture: profilePicture,
    expandProfile: expandProfile,
    profilePreamble: profilePreamble,
    profileComponent: profileComponent,
    profileMenu: profileMenu,
    classNameProfilePreamble: classNameProfilePreamble,
    classNameProfileComponent: classNameProfileComponent,
    classNameMenuMobileSelected: classNameMenuMobileSelected,
    classNameMenuMobile: classNameMenuMobile,
    classNameSubMenuMobile: classNameSubMenuMobile,
    classNameProfilePicture: classNameProfilePicture,
    classNameProfilePictureContainer: classNameProfilePictureContainer,
    stylesProfilePreamble: stylesProfilePreamble,
    stylesProfileComponent: stylesProfileComponent,
    stylesMenuMobileSelected: stylesMenuMobileSelected,
    stylesMenuMobile: stylesMenuMobile,
    stylesSubMenuMobile: stylesSubMenuMobile,
    stylesProfilePicture: stylesProfilePicture,
    stylesProfilePictureContainer: stylesProfilePictureContainer
  })), showLeftMenu && createElement("div", {
    className: 'nav_div_left_menu',
    style: {
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'stretch',
      position: 'absolute',
      left: theme.spaces.ltl + 'px',
      backgroundColor: Util.getTextColor(theme, variant, "filled"),
      top: parseInt(theme.dimensions.navHeight) + 'px'
    }
  }, createElement("div", {
    className: 'nav_div_left_menu_overlay',
    style: {
      position: 'fixed',
      left: '0px',
      top: '0px',
      width: '100%',
      height: '100%',
      backgroundColor: 'transparent',
      zIndex: '198'
    },
    onClick: function onClick() {
      toggleDropdownExpandedWrap(-1);
      toggleLeftMenu();
    }
  }), menu.map(function (element, key) {
    if (Object.prototype.toString.call(element) === '[object Array]') {
      return createElement("div", {
        key: key,
        style: {
          position: 'relative',
          zIndex: '199',
          width: theme.dimensions.menuWidth + 'px'
        }
      }, getDropdownExpandedWrap()[key] && createElement(SfButton, {
        className: 'nav_left_menu_' + key + '_expanded ' + classNameMenuMobileSelected,
        styles: _extends({
          width: '100%',
          borderTopLeftRadius: key === 0 ? '5px' : '0px',
          borderTopRightRadius: key === 0 ? '5px' : '0px',
          borderBottomLeftRadius: key === menu.length - 1 ? '5px' : '0px',
          borderBottomRightRadius: key === menu.length - 1 ? '5px' : '0px',
          fontWeight: '400',
          marginTop: '-2px',
          cursor: 'pointer',
          justifyContent: 'flex-start',
          boxShadow: key === menu.length - 1 ? '0px 2px 2px #aaa' : 'none',
          backgroundColor: Util.getTextColor(theme, variant, "filled")
        }, stylesMenuMobileSelected),
        variant: variant,
        type: "outlined",
        caption: element[0].caption + (!getDropdownExpandedWrap()[key] ? ' ▸' : ' ▸'),
        onClick: function onClick() {
          toggleDropdownExpandedWrap(key);
        }
      }), !getDropdownExpandedWrap()[key] && createElement(SfButton, {
        className: 'nav_left_menu_' + key + '_collapsed ' + classNameMenuMobile,
        styles: _extends({
          width: '100%',
          borderTopLeftRadius: key === 0 ? '5px' : '0px',
          borderTopRightRadius: key === 0 ? '5px' : '0px',
          borderBottomLeftRadius: key === menu.length - 1 ? '5px' : '0px',
          borderBottomRightRadius: key === menu.length - 1 ? '5px' : '0px',
          fontWeight: '400',
          marginTop: '-2px',
          cursor: 'pointer',
          justifyContent: 'flex-start',
          boxShadow: key === menu.length - 1 ? '0px 2px 2px #aaa' : 'none',
          zIndex: '199'
        }, stylesMenuMobile),
        variant: variant,
        type: "filled",
        caption: element[0].caption + (!getDropdownExpandedWrap()[key] ? ' ▸' : ' ▸'),
        onClick: function onClick() {
          toggleDropdownExpandedWrap(key);
        }
      }), getDropdownExpandedWrap()[key] && createElement("div", {
        style: {
          width: theme.dimensions.menuWidth + 'px',
          flexDirection: 'column',
          position: 'absolute',
          left: '105%',
          top: '0px',
          display: 'flex',
          alignItems: 'stretch',
          zIndex: '199',
          backgroundColor: Util.getTextColor(theme, variant, "filled")
        }
      }, element.slice(1).map(function (item, key1) {
        return createElement(SfButton, {
          className: 'nav_left_menu_' + key + '_' + key1 + " " + classNameSubMenuMobile,
          styles: _extends({
            width: '100%',
            borderTopLeftRadius: key1 === 0 ? '5px' : '0px',
            borderTopRightRadius: key1 === 0 ? '5px' : '0px',
            borderBottomLeftRadius: key1 === element.length - 2 ? '5px' : '0px',
            borderBottomRightRadius: key1 === element.length - 2 ? '5px' : '0px',
            fontWeight: '400',
            marginTop: '-2px',
            cursor: 'pointer',
            justifyContent: 'flex-start',
            boxShadow: key1 === element.length - 1 ? '0px 2px 2px #aaa' : 'none'
          }, stylesSubMenuMobile),
          key: key1,
          variant: variant,
          type: "filled",
          caption: item.caption,
          onClick: function onClick() {
            toggleDropdownExpandedWrap(-1);
            setShowLeftMenu(false);
            clickMenu(item.link, item.component);
          }
        });
      })));
    } else {
      return createElement("div", {
        key: key,
        style: {
          zIndex: '199',
          width: theme.dimensions.menuWidth + 'px'
        }
      }, createElement(SfButton, {
        className: 'nav_left_menu_' + key + ' ' + classNameMenuMobile,
        styles: _extends({
          width: '100%',
          borderTopLeftRadius: key === 0 ? '5px' : '0px',
          borderTopRightRadius: key === 0 ? '5px' : '0px',
          borderBottomLeftRadius: key === menu.length - 1 ? '5px' : '0px',
          borderBottomRightRadius: key === menu.length - 1 ? '5px' : '0px',
          fontWeight: '400',
          marginTop: '-2px',
          cursor: 'pointer',
          justifyContent: 'flex-start',
          zIndex: '199'
        }, stylesMenuMobile),
        key: key,
        variant: variant,
        type: "filled",
        caption: element.caption,
        onClick: function onClick() {
          toggleDropdownExpandedWrap(-1);
          setShowLeftMenu(false);
          clickMenu(element.link, element.component);
        }
      }));
    }
  })), showRightMenu && createElement("div", {
    className: 'nav_div_right_menu ',
    style: {
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'stretch',
      position: 'absolute',
      right: theme.spaces.ltl + 'px',
      top: parseInt(theme.dimensions.navHeight) + 'px'
    }
  }, createElement("div", {
    className: 'nav_div_right_menu_overlay',
    style: {
      position: 'fixed',
      left: '0px',
      top: '0px',
      width: '100%',
      height: '100%',
      backgroundColor: 'transparent',
      zIndex: '198'
    },
    onClick: function onClick() {
      toggleRightMenu();
    }
  }), createElement("div", {
    className: classNameContainerRightMenu,
    style: _extends({
      flexDirection: 'column',
      display: 'flex',
      alignItems: 'stretch',
      border: 'solid 1px' + Util.getBorderColor(theme, variant, "outlined"),
      backgroundColor: Util.getTextColor(theme, variant, "filled"),
      borderRadius: parseInt(theme.spaces.min) + 'px',
      padding: parseInt(theme.spaces.min) + 'px',
      zIndex: '199'
    }, stylesContainerRightMenu)
  }, showSearch && createElement(SfInput, {
    classNameContainer: classNameSearchContainer,
    classNameInput: classNameSearchInput,
    stylesContainer: stylesSearchContainer,
    stylesInput: stylesSearchInput,
    variant: variant == theme.variants.dark ? theme.variants.light : variant == theme.variants.light ? theme.variants.dark : variant,
    caption: searchCaption,
    icon: searchIcon != null ? searchIcon : null,
    inputType: theme.inputTypes.name,
    onComplete: function onComplete(value) {
      setSearchString(value);
    },
    onEnterPressed: function onEnterPressed() {
      toggleRightMenu();
      onSearchPressed(searchString);
    }
  }))), showNotificationMenu && createElement(NotificationMenu, {
    variant: variant,
    theme: theme,
    notificationList: notificationList,
    toggleNotificationMenu: toggleNotificationMenu,
    onViewAllNotificationsClicked: onClickNotificationViewAll,
    onNotificationClicked: onClickNotification,
    stylesNotificationListContainer: stylesNotificationListContainer,
    stylesNotificationRead: stylesNotificationRead,
    stylesNotificationUnRead: stylesNotificationUnRead,
    classNameNotificationListContainer: classNameNotificationListContainer,
    classNameNotificationRead: classNameNotificationRead,
    classNameNotificationUnRead: classNameNotificationUnRead,
    stylesNotificationViewAll: stylesNotificationViewAll,
    classNameNotificationViewAll: classNameNotificationViewAll
  }))), windowDimensions.width > theme.breakpoints.tablet && createElement("div", null, createElement(Banner, {
    variant: variant,
    theme: theme,
    bannerComponent: bannerComponent,
    bannerCta: bannerCta,
    bannerEnableDismiss: bannerEnableDismiss,
    bannerText: bannerText,
    onBannerCtaPressed: onBannerCtaPressed,
    showBanner: showBanner,
    stylesBannerContainer: stylesBannerContainer,
    stylesBannerCta: stylesBannerCta,
    stylesBannerText: stylesBannerText,
    classNameBannerContainer: classNameBannerContainer,
    classNameBannerCta: classNameBannerCta,
    classNameBannerText: classNameBannerText
  }), createElement("div", {
    className: classNameContainerDesktop,
    style: _extends({
      height: theme.dimensions.navHeight + 'px',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'space-between',
      paddingLeft: theme.spaces.big + 'px',
      paddingRight: theme.spaces.big + 'px'
    }, stylesContainerDesktop)
  }, createElement("div", {
    style: {
      display: 'flex',
      alignItems: 'center'
    }
  }, showBack && createElement("div", {
    className: 'nav_back_menu ' + classNameBack,
    onClick: function onClick() {
      onBackPressed();
    },
    style: _extends({
      paddingRight: theme.spaces.ltl + 'px',
      cursor: 'pointer'
    }, stylesBack)
  }, createElement("b", null, backIcon == null ? '‹' : backIcon)), brandLogo != null && brandLogo != "" && createElement("img", {
    className: 'nav_brand_logo ' + classNameBrandLogo,
    src: brandLogo,
    onClick: function onClick() {
      if (enableRouting) {
        if (homeMenu.component == null) {
          onHomePressed();
        } else {
          var interfaceNavigate = {
            link: homeMenu.link,
            component: homeMenu.component,
            args: null
          };
          navigateTo(interfaceNavigate);
        }
      } else {
        onHomePressed();
      }
    },
    style: _extends({
      cursor: 'pointer',
      height: parseInt(theme.dimensions.navHeight) * 10 / 10 + 'px',
      paddingRight: theme.spaces.ltl + 'px'
    }, stylesBrandLogo)
  }), brand != "" && createElement("div", {
    className: 'nav_brand ' + classNameBrand,
    onClick: function onClick() {
      if (enableRouting) {
        if (homeMenu.component == null) {
          onHomePressed();
        } else {
          var interfaceNavigate = {
            link: homeMenu.link,
            component: homeMenu.component,
            args: null
          };
          navigateTo(interfaceNavigate);
        }
      } else {
        onHomePressed();
      }
    },
    style: _extends({
      cursor: 'pointer',
      fontWeight: 800,
      fontSize: '150%'
    }, stylesBrand)
  }, brand)), createElement("div", {
    style: {
      display: 'flex',
      alignItems: 'center'
    }
  }, menu.map(function (element, key) {
    var arr = getDropdownExpandedWrap();
    arr.push(false);
    if (Object.prototype.toString.call(element) === '[object Array]') {
      return createElement("div", {
        key: key,
        style: {
          position: 'relative',
          fontWeight: '500',
          marginLeft: theme.spaces.big + 'px',
          cursor: 'pointer'
        }
      }, createElement("div", {
        className: 'nav_menu_' + key + ' ' + classNameMenu,
        style: _extends({
          display: 'flex',
          alignItems: 'center'
        }, stylesMenu),
        onClick: function onClick() {
          toggleDropdownExpandedWrap(key);
        }
      }, element[0].caption, "\xA0", createElement("small", null, createElement("small", null, !getDropdownExpandedWrap()[key] && '▼', getDropdownExpandedWrap()[key] && '▲'))), getDropdownExpandedWrap()[key] && createElement("div", {
        style: {
          position: 'absolute',
          top: '30px',
          left: '0px',
          display: 'flex',
          flexDirection: 'column',
          alignItems: 'stretch'
        }
      }, createElement("div", {
        className: 'nav_menu_overlay',
        style: {
          position: 'fixed',
          left: '0px',
          top: '0px',
          width: '100%',
          height: '100%',
          backgroundColor: 'transparent',
          zIndex: '198'
        },
        onClick: function onClick() {
          toggleDropdownExpandedWrap(key);
        }
      }), element.slice(1).map(function (item, key1) {
        return createElement(SfButton, {
          className: 'nav_menu_' + key + '_' + key1 + ' ' + classNameSubMenu,
          styles: _extends({
            borderTopLeftRadius: key1 === 0 ? '5px' : '0px',
            borderTopRightRadius: key1 === 0 ? '5px' : '0px',
            borderBottomLeftRadius: key1 === element.length - 2 ? '5px' : '0px',
            borderBottomRightRadius: key1 === element.length - 2 ? '5px' : '0px',
            fontWeight: '400',
            marginTop: '-2px',
            cursor: 'pointer',
            zIndex: '199',
            width: theme.dimensions.menuWidth + 'px'
          }, stylesSubMenu),
          key: key1,
          variant: variant,
          type: "filled",
          caption: item.caption,
          onClick: function onClick() {
            toggleDropdownExpandedWrap(key);
            clickMenu(item.link, item.component);
          }
        });
      })));
    } else {
      arr.push(0);
      return createElement("div", {
        className: 'nav_menu_' + key + ' ' + classNameMenu,
        key: key,
        style: _extends({
          cursor: 'pointer',
          fontWeight: '500',
          marginLeft: theme.spaces.big + 'px'
        }, stylesMenu),
        onClick: function onClick() {
          clickMenu(element.link, element.component);
        }
      }, element.caption);
    }
  })), createElement("div", {
    style: {
      position: 'relative',
      display: 'flex',
      alignItems: 'center'
    }
  }, showSearch && createElement(SfInput, {
    classNameContainer: classNameSearchContainer,
    classNameInput: classNameSearchInput,
    stylesContainer: _extends({}, stylesSearchContainer),
    stylesInput: stylesSearchInput,
    variant: variant == theme.variants.dark ? theme.variants.light : variant == theme.variants.light ? theme.variants.dark : variant,
    caption: searchCaption,
    icon: searchIcon != null ? searchIcon : null,
    inputType: theme.inputTypes.name,
    onComplete: function onComplete(value) {
      setSearchString(value);
    },
    onEnterPressed: function onEnterPressed() {
      onSearchPressed(searchString);
    }
  }), showSignIn && createElement(SfButton, {
    className: 'nav_signin_button ' + classNameSignIn,
    styles: _extends({
      height: '30px',
      fontSize: '90%',
      marginLeft: theme.spaces.mod + 'px'
    }, stylesSignIn),
    variant: variant == theme.variants.dark ? theme.variants.light : variant == theme.variants.light ? theme.variants.dark : variant,
    type: theme.types.filled,
    caption: signInCaption,
    onClick: function onClick() {
      onSignInPressed();
    }
  }), showNotification && createElement("div", {
    className: 'btn_notif_icon ' + classNameNotificationIcon,
    style: _extends({
      display: 'flex',
      marginLeft: theme.spaces.mod + 'px',
      alignItems: 'center',
      cursor: 'pointer'
    }, stylesNotificationIcon),
    onClick: function onClick(e) {
      toggleNotificationMenu();
      e.stopPropagation();
    }
  }, createElement("div", null, notificationIcon != null ? notificationIcon : "🔔"), notificationListContainsUnRead() && createElement("div", {
    className: classNameNotificationBadge,
    style: _extends({
      fontSize: '70%',
      width: '10px',
      height: '10px',
      backgroundColor: 'red',
      color: 'red',
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center',
      borderRadius: '8px',
      marginBottom: '15px',
      marginLeft: '-8px',
      fontWeight: '800'
    }, stylesNotificationBadge)
  }, createElement("div", null, "0"))), showProfile && createElement(Profile, {
    clickMenu: clickMenu,
    toggleExpandProfile: toggleExpandProfile,
    toggleProfileDropdownExpandedWrap: toggleProfileDropdownExpandedWrap,
    setExpandProfile: setExpandProfile,
    getProfileDropdownExpandedWrap: getProfileDropdownExpandedWrap,
    theme: theme,
    variant: variant,
    profilePicture: profilePicture,
    expandProfile: expandProfile,
    profilePreamble: profilePreamble,
    profileComponent: profileComponent,
    profileMenu: profileMenu,
    classNameProfilePicture: classNameProfilePicture,
    classNameProfilePreamble: classNameProfilePreamble,
    classNameProfileComponent: classNameProfileComponent,
    classNameMenuMobileSelected: classNameMenuMobileSelected,
    classNameMenuMobile: classNameMenuMobile,
    classNameSubMenuMobile: classNameSubMenuMobile,
    classNameProfilePictureContainer: classNameProfilePictureContainer,
    stylesProfilePreamble: stylesProfilePreamble,
    stylesProfileComponent: stylesProfileComponent,
    stylesMenuMobileSelected: stylesMenuMobileSelected,
    stylesMenuMobile: stylesMenuMobile,
    stylesSubMenuMobile: stylesSubMenuMobile,
    stylesProfilePicture: stylesProfilePicture,
    stylesProfilePictureContainer: stylesProfilePictureContainer
  }), showNotificationMenu && createElement(NotificationMenu, {
    variant: variant,
    theme: theme,
    notificationList: notificationList,
    toggleNotificationMenu: toggleNotificationMenu,
    onViewAllNotificationsClicked: onClickNotificationViewAll,
    onNotificationClicked: onClickNotification,
    stylesNotificationListContainer: stylesNotificationListContainer,
    stylesNotificationRead: stylesNotificationRead,
    stylesNotificationUnRead: stylesNotificationUnRead,
    classNameNotificationListContainer: classNameNotificationListContainer,
    classNameNotificationRead: classNameNotificationRead,
    classNameNotificationUnRead: classNameNotificationUnRead,
    stylesNotificationViewAll: stylesNotificationViewAll,
    classNameNotificationViewAll: classNameNotificationViewAll
  }))))), createElement(ContextSfNavProvider, {
    value: interfaceSfNavProvider
  }, enableRouting && history.length > 0 && history[history.length - 1].component));
};

export { ContextSfNav, SfButton, SfInput, SfNav };
//# sourceMappingURL=index.modern.js.map
